/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.neuroph.netbeans.fxvis;

import java.awt.BorderLayout;
import java.util.ArrayList;
import javafx.application.Platform;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Group;
import javafx.scene.PerspectiveCamera;
import javafx.scene.PointLight;
import javafx.scene.Scene;
import javafx.scene.input.KeyCode;
import javafx.scene.input.MouseEvent;
import javafx.scene.paint.Color;
import javafx.scene.transform.Rotate;
import org.fxyz.cameras.CameraTransformer;
import org.fxyz.shapes.composites.Histogram;
import org.fxyz.shapes.composites.ScatterPlot;
import org.fxyz.tools.CubeViewer;
import org.netbeans.api.settings.ConvertAsProperties;
import org.neuroph.core.data.DataSet;
import org.neuroph.core.data.DataSetRow;
import org.neuroph.netbeans.charts.providers3d.DatasetDataProvider3D;
import org.neuroph.netbeans.charts.providers3d.WeightsDataProvider3D;
import org.neuroph.nnet.MultiLayerPerceptron;
import org.nugs.graph2d.api.Attribute;
import org.nugs.graph3d.api.DataProvider3D;
import org.nugs.graph3d.api.Point3D;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.neuroph.netbeans.fxvis//FXVisualization//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "FXVisualizationTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.neuroph.netbeans.fxvis.JFXVisualizationTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_FXVisualizationAction",
        preferredID = "JFXVisualizationTopComponent"
)
@Messages({
    "CTL_FXVisualizationAction=FXVisualization",
    "CTL_FXVisualizationTopComponent=FXVisualization Window",
    "HINT_FXVisualizationTopComponent=This is a FXVisualization window"
})
public final class JFXVisualizationTopComponent extends TopComponent {

    private JFXPanel jfxPanel; //JFXPanel class
    
    /**
     * 3D Histogram from fxyz
     */
    private Histogram histogram;

    /**
     * 3D scatter from fxyz
     */
    private ScatterPlot scatterPlot;

    
    
    private PerspectiveCamera camera;    
// private double cameraDistance = 500;
    
    // used for mouse tracking
    private double scenex, sceney, scenez = 0;
    
    private double fixedXAngle, fixedYAngle, fixedZAngle = 0;
    private final DoubleProperty angleX = new SimpleDoubleProperty(0);
    private final DoubleProperty angleY = new SimpleDoubleProperty(0);
    private final DoubleProperty angleZ = new SimpleDoubleProperty(0);

    // 3d coord cube from fxyz
    private CubeViewer cubeViewer;
    
    // used for cubeViewer rotation & translation
    private CameraTransformer cameraTransform = new CameraTransformer();

    // used for setting camerTranformer behaviour
    private double mousePosX;
    private double mousePosY;
    private double mouseOldX;
    private double mouseOldY;
    private double mouseDeltaX;
    private double mouseDeltaY;
        
    Group sceneRoot;
    Scene scene;    
    
    public JFXVisualizationTopComponent() {
        initComponents();
        setName(Bundle.CTL_FXVisualizationTopComponent());
        setToolTipText(Bundle.HINT_FXVisualizationTopComponent());
        jfxPanel = new JFXPanel();
        add(jfxPanel, BorderLayout.CENTER);
        
     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        scatterButton = new javax.swing.JButton();
        histogramButton = new javax.swing.JButton();
        gridButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(scatterButton, org.openide.util.NbBundle.getMessage(JFXVisualizationTopComponent.class, "JFXVisualizationTopComponent.scatterButton.text")); // NOI18N
        scatterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scatterButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel1.add(scatterButton, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(histogramButton, org.openide.util.NbBundle.getMessage(JFXVisualizationTopComponent.class, "JFXVisualizationTopComponent.histogramButton.text")); // NOI18N
        histogramButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                histogramButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 0, 0);
        jPanel1.add(histogramButton, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(gridButton, org.openide.util.NbBundle.getMessage(JFXVisualizationTopComponent.class, "JFXVisualizationTopComponent.gridButton.text")); // NOI18N
        gridButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gridButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 73;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 239, 0);
        jPanel1.add(gridButton, gridBagConstraints);

        add(jPanel1, java.awt.BorderLayout.EAST);
    }// </editor-fold>//GEN-END:initComponents

    private void gridButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gridButtonActionPerformed

        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                drawCubeViewer();
            }
        });
    }//GEN-LAST:event_gridButtonActionPerformed

    private void histogramButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_histogramButtonActionPerformed

        Platform.runLater(() -> {
            drawHistogram();
        });
    }//GEN-LAST:event_histogramButtonActionPerformed

    private void scatterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scatterButtonActionPerformed
        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                drawScatter();
            }
        });
    }//GEN-LAST:event_scatterButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton gridButton;
    private javax.swing.JButton histogramButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton scatterButton;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {

    }



    private void drawCubeViewer() {
        sceneRoot = new Group();
        scene = new Scene(sceneRoot, jfxPanel.getWidth(), jfxPanel.getHeight());
        scene.setFill(Color.BLACK);
        //Setup camera and scatterplot cubeviewer
        camera = new PerspectiveCamera(true);
        // velicina grida (skala), razmak izmedju resetki, svetlo, scatter raddius, debljina osa, grid size - debljina resetki?
         cubeViewer = new CubeViewer(280, 20, true, 3, 5, 1);
         cubeViewer.showSphereGroup(false);

        sceneRoot.getChildren().addAll(cubeViewer);
        //setup camera transform for rotational support
        cubeViewer.getChildren().add(cameraTransform);
        cameraTransform.setTranslate(0, 0, 0);
        cameraTransform.getChildren().add(camera);
        camera.setNearClip(0.1);
        camera.setFarClip(30000.0);
        camera.setTranslateZ(-500);
        cameraTransform.ry.setAngle(-45.0);
        cameraTransform.rx.setAngle(-10.0);
        //add a Point Light for better viewing of the grid coordinate system
        PointLight light = new PointLight(Color.WHITE);
        cameraTransform.getChildren().add(light);
        light.setTranslateX(camera.getTranslateX());
        light.setTranslateY(camera.getTranslateY());
        light.setTranslateZ(camera.getTranslateZ());
        scene.setCamera(camera);

        //Create and add some data to the Cube
        ArrayList<Double> dataX = new ArrayList<>();
        ArrayList<Double> dataY = new ArrayList<>();
        ArrayList<Double> dataZ = new ArrayList<>();

        DataProvider3D<Point3D> dataProvider = new WeightsDataProvider3D(new MultiLayerPerceptron(4, 5, 6, 10, 15, 20));

        Attribute[] attributes = new Attribute[3];
        // to do put some attribute shere
        Point3D[] data = dataProvider.getData(attributes);

        for (int i = 1; i < data.length; i++) {
            Point3D p = data[i];
            dataX.add(p.getX());
            dataY.add(p.getY());
            dataZ.add(p.getZ() * 100);
        }

        cubeViewer.setxAxisData(dataX);
        cubeViewer.setyAxisData(dataY);
        cubeViewer.setzAxisData(dataZ);        
        
        //--------------------------------------------------------------
        
        
        
        //First person shooter keyboard movement 
        scene.setOnKeyPressed(event -> {
            double change = 10.0;
            //Add shift modifier to simulate "Running Speed"
            if (event.isShiftDown()) {
                change = 50.0;
            }
            //What key did the user press?
            KeyCode keycode = event.getCode();
            //Step 2c: Add Zoom controls
            if (keycode == KeyCode.W) {
                camera.setTranslateZ(camera.getTranslateZ() + change);
            }
            if (keycode == KeyCode.S) {
                camera.setTranslateZ(camera.getTranslateZ() - change);
            }
            //Step 2d:  Add Strafe controls
            if (keycode == KeyCode.A) {
                camera.setTranslateX(camera.getTranslateX() - change);
            }
            if (keycode == KeyCode.D) {
                camera.setTranslateX(camera.getTranslateX() + change);
            }
        });

        scene.setOnMousePressed((MouseEvent me) -> {
            mousePosX = me.getSceneX();
            mousePosY = me.getSceneY();
            mouseOldX = me.getSceneX();
            mouseOldY = me.getSceneY();
        });
        scene.setOnMouseDragged((MouseEvent me) -> {
            mouseOldX = mousePosX;
            mouseOldY = mousePosY;
            mousePosX = me.getSceneX();
            mousePosY = me.getSceneY();
            mouseDeltaX = (mousePosX - mouseOldX);
            mouseDeltaY = (mousePosY - mouseOldY);

            double modifier = 10.0;
            double modifierFactor = 0.1;

            if (me.isControlDown()) {
                modifier = 0.1;
            }
            if (me.isShiftDown()) {
                modifier = 50.0;
            }
            if (me.isPrimaryButtonDown()) {
                cameraTransform.ry.setAngle(((cameraTransform.ry.getAngle() + mouseDeltaX * modifierFactor * modifier * 2.0) % 360 + 540) % 360 - 180);  // +
                cameraTransform.rx.setAngle(((cameraTransform.rx.getAngle() - mouseDeltaY * modifierFactor * modifier * 2.0) % 360 + 540) % 360 - 180);  // -
                cubeViewer.adjustPanelsByPos(cameraTransform.rx.getAngle(), cameraTransform.ry.getAngle(), cameraTransform.rz.getAngle());
            } else if (me.isSecondaryButtonDown()) {
                double z = camera.getTranslateZ();
                double newZ = z + mouseDeltaX * modifierFactor * modifier;
                camera.setTranslateZ(newZ);
            } else if (me.isMiddleButtonDown()) {
                cameraTransform.t.setX(cameraTransform.t.getX() + mouseDeltaX * modifierFactor * modifier * 0.3);  // -
                cameraTransform.t.setY(cameraTransform.t.getY() + mouseDeltaY * modifierFactor * modifier * 0.3);  // -
            }
        });
        jfxPanel.setScene(scene);

    }

    private void drawHistogram() {
        sceneRoot = new Group();
        scene = new Scene(sceneRoot, jfxPanel.getWidth(), jfxPanel.getHeight());
        scene.setFill(Color.BLACK);
        camera = new PerspectiveCamera(true);
        camera.setNearClip(0.1);
        camera.setFarClip(30000.0);
        camera.setTranslateZ(-100);
        scene.setCamera(camera);
       //  cubeViewer = new CubeViewer(100, 10, true, 3, 5, 1);
         //cubeViewer.showSphereGroup(false);

     //   sceneRoot.getChildren().addAll(cubeViewer);
        //setup camera transform for rotational support
        sceneRoot.getChildren().add(cameraTransform);
        
        
        histogram = new Histogram(10, 1, true);
        sceneRoot.getChildren().addAll(histogram);

        DataProvider3D<Point3D> dataProvider = new WeightsDataProvider3D(new MultiLayerPerceptron(4, 5, 4));

        Attribute[] attributes = new Attribute[3];
        // to do put some attribute shere
        Point3D[] data = dataProvider.getData(attributes); // kako 50 5x5= 25 + 6x4 =24 + 1 = 50

        // napravi ovo da bude genericko tako da radi za bilo koju arhitekturu
        float[][] arrayY = new float[2][26]; // potrebno je znati koliko ima lejera
        for (int i = 1; i < 50; i++) {
            Point3D p = data[i];
            arrayY[(int) p.getX() - 1][(int) p.getY()] = (float) p.getZ() * 30;
        }

        histogram.setHeightData(arrayY, 1, 4, Color.SKYBLUE, false, true);

        scene.setOnKeyPressed(event -> {
            double change = 10.0;
            //Add shift modifier to simulate "Running Speed"
            if (event.isShiftDown()) {
                change = 50.0;
            }
            //What key did the user press?
            KeyCode keycode = event.getCode();
            //Step 2c: Add Zoom controls
            if (keycode == KeyCode.W) {
                camera.setTranslateZ(camera.getTranslateZ() + change);
            }
            if (keycode == KeyCode.S) {
                camera.setTranslateZ(camera.getTranslateZ() - change);
            }
            //Step 2d:  Add Strafe controls
            if (keycode == KeyCode.A) {
                camera.setTranslateX(camera.getTranslateX() - change);
            }
            if (keycode == KeyCode.D) {
                camera.setTranslateX(camera.getTranslateX() + change);
            }
        });

        //Add a Mouse Handler for Rotations
        Rotate xRotate = new Rotate(0, Rotate.X_AXIS);
        Rotate yRotate = new Rotate(0, Rotate.Y_AXIS);
        Rotate zRotate = new Rotate(0, Rotate.Z_AXIS);

        histogram.getTransforms().addAll(xRotate, yRotate);
        //Use Binding so your rotation doesn't have to be recreated
        xRotate.angleProperty().bind(angleX);
        yRotate.angleProperty().bind(angleY);
        zRotate.angleProperty().bind(angleZ);

        //Start Tracking mouse movements only when a button is pressed
        scene.setOnMousePressed(event -> {
            scenex = event.getSceneX();
            sceney = event.getSceneY();
            fixedXAngle = angleX.get();
            fixedYAngle = angleY.get();
            if (event.isMiddleButtonDown()) {
                scenez = event.getSceneX();
                fixedZAngle = angleZ.get();
            }

        });
        //Angle calculation will only change when the button has been pressed
        scene.setOnMouseDragged(event -> {
            if (event.isMiddleButtonDown()) {
                angleZ.set(fixedZAngle - (scenez - event.getSceneY()));
            } else {
                angleX.set(fixedXAngle - (scenex - event.getSceneY()));
            }

            angleY.set(fixedYAngle + sceney - event.getSceneX());
        });

        jfxPanel.setScene(scene);
    }

    private void drawScatter() {
        sceneRoot = new Group();
        scene = new Scene(sceneRoot, jfxPanel.getWidth(), jfxPanel.getHeight());
        scene.setFill(Color.BLACK);
        camera = new PerspectiveCamera(true);
        camera.setNearClip(0.1);
        camera.setFarClip(30000.0);
        camera.setTranslateZ(-1000);
        scene.setCamera(camera);

//         cubeViewer = new CubeViewer(100, 10, true, 3, 5, 1);
//         cubeViewer.showSphereGroup(false);

//        sceneRoot.getChildren().addAll(cubeViewer);
        //setup camera transform for rotational support
        sceneRoot.getChildren().add(cameraTransform);        
        
        scatterPlot = new ScatterPlot(100, 1, true);
        sceneRoot.getChildren().addAll(scatterPlot);

        // data is generated here
        ArrayList<Double> dataX = new ArrayList<>();
        ArrayList<Double> dataY = new ArrayList<>();
        ArrayList<Double> dataZ = new ArrayList<>();
        
        //create some random dataset here
        //DataProvider3D<Point3D> dataProvider = new WeightsDataProvider3D(new MultiLayerPerceptron(4, 5, 6, 10, 15, 20));
        DataSet someDataSet = createRandomDataSet();
        DataProvider3D<Point3D> dataProvider = new DatasetDataProvider3D(someDataSet);

        Attribute[] attributes = new Attribute[3];
        attributes[0] = new Attribute(0, false, "labela1");
        attributes[1] = new Attribute(1, false, "labela2");
        attributes[2] = new Attribute(2, false, "labela3");
        // to do put some attributes here
        Point3D[] data = dataProvider.getData(attributes);

        for (int i = 1; i < data.length; i++) {
            Point3D p = data[i];
            dataX.add(p.getX());
            dataY.add(p.getY());
            dataZ.add(p.getZ());
        }

        //--------------------------------------------------------------
        scatterPlot.setXYZData(dataX, dataY, dataZ);

        scene.setOnKeyPressed(event -> {
            double change = 10.0;
            //Add shift modifier to simulate "Running Speed"
            if (event.isShiftDown()) {
                change = 50.0;
            }
            //What key did the user press?
            KeyCode keycode = event.getCode();
            //Step 2c: Add Zoom controls
            if (keycode == KeyCode.W) {
                camera.setTranslateZ(camera.getTranslateZ() + change);
            }
            if (keycode == KeyCode.S) {
                camera.setTranslateZ(camera.getTranslateZ() - change);
            }
            //Step 2d:  Add Strafe controls
            if (keycode == KeyCode.A) {
                camera.setTranslateX(camera.getTranslateX() - change);
            }
            if (keycode == KeyCode.D) {
                camera.setTranslateX(camera.getTranslateX() + change);
            }
        });

        //Add a Mouse Handler for Rotations
        Rotate xRotate = new Rotate(0, Rotate.X_AXIS);
        Rotate yRotate = new Rotate(0, Rotate.Y_AXIS);
        Rotate zRotate = new Rotate(0, Rotate.Z_AXIS);

        scatterPlot.getTransforms().addAll(xRotate, yRotate);
        //Use Binding so your rotation doesn't have to be recreated
        xRotate.angleProperty().bind(angleX);
        yRotate.angleProperty().bind(angleY);
        zRotate.angleProperty().bind(angleZ);

        //Start Tracking mouse movements only when a button is pressed
        scene.setOnMousePressed(event -> {
            scenex = event.getSceneX();
            sceney = event.getSceneY();
            fixedXAngle = angleX.get();
            fixedYAngle = angleY.get();
            if (event.isMiddleButtonDown()) {
                scenez = event.getSceneX();
                fixedZAngle = angleZ.get();
            }

        });
        //Angle calculation will only change when the button has been pressed
        scene.setOnMouseDragged(event -> {
            if (event.isMiddleButtonDown()) {
                angleZ.set(fixedZAngle - (scenez - event.getSceneY()));
            } else {
                angleX.set(fixedXAngle - (scenex - event.getSceneY()));
            }

            angleY.set(fixedYAngle + sceney - event.getSceneX());
        });

        jfxPanel.setScene(scene);
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    private DataSet createRandomDataSet() {
        DataSet dataSet = new DataSet(3, 1);
        for (int i = 0; i<1000; i++) {
            double[] input = new double[3];
            input[0] = Math.random() * 100;
            input[1] = Math.random() * 100;
            input[2] = Math.random() * 100;
            DataSetRow row = new DataSetRow(input, new double[]{1});
            dataSet.addRow(row);
        }
        return dataSet;
    }
}
