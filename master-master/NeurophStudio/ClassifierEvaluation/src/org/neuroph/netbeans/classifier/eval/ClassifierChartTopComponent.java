package org.neuroph.netbeans.classifier.eval;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Paint;
import java.util.HashMap;
import java.util.Set;
import org.goai.classification.eval.ClassificationResultByClass;
import org.goai.classification.eval.ClassifierEvaluationResult;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.neuroph.netbeans.classifier.eval//ClassifierChart//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "ClassifierChartTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.neuroph.netbeans.classifier.eval.ClassifierChartTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ClassifierChartAction",
        preferredID = "ClassifierChartTopComponent")
@Messages({
    "CTL_ClassifierChartAction=ClassifierChart",
    "CTL_ClassifierChartTopComponent=ClassifierChart Window",
    "HINT_ClassifierChartTopComponent=This is a ClassifierChart window"
})
public final class ClassifierChartTopComponent extends TopComponent {

    ClassifierEvaluationResult<double[], String> evalResult;
    String[] classNames;
    
    public ClassifierChartTopComponent() {
        initComponents();
        setName(Bundle.CTL_ClassifierChartTopComponent());
        setToolTipText(Bundle.HINT_ClassifierChartTopComponent());

    }

    public void setEvaluationResult(ClassifierEvaluationResult evalResult) {
        this.evalResult = evalResult;
    }

    public void setClassNames(String[] classNames) {
        this.classNames = classNames;
    }
    
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());
        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
          CategoryDataset dataset = createDataset();
          JFreeChart  chart = createChart(dataset);
          ChartPanel chartPanel = new ChartPanel(chart);
          jPanel1.add(chartPanel, BorderLayout.CENTER);
          revalidate();
    }
    
  /**
     * Returns a sample dataset.
     * 
     * @return The dataset.
     */
    private CategoryDataset createDataset() {
        
        final String series1 = "Correct";
        final String series2 = "Wrong";

        HashMap<String, ClassificationResultByClass> resultsByClass = evalResult.getResultsByClass();
        Set<String> classes = evalResult.getClasses();
                
        // create the dataset...
        final DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        for(String className : classes) {
            //evalResult.
            ClassificationResultByClass crbc = resultsByClass.get(className);
            int correct = crbc.getCorrectClassifications();
            int wrong = crbc.getWrongClassifications();
            dataset.addValue(correct, series1, className);
            dataset.addValue(wrong, series2, className);
        }
                       
        return dataset;
        
    }    
    
    /**
     * Creates a sample chart.
     * 
     * @param dataset  the dataset.
     * 
     * @return The chart.
     */
    private JFreeChart createChart(final CategoryDataset dataset) {
        
        // create the chart...
        final JFreeChart chart = ChartFactory.createBarChart(
            "Classifier evaluation results",         // chart title
            "Category",               // domain axis label
            "Percent",                  // range axis label
            dataset,                  // data
            PlotOrientation.VERTICAL, // orientation
            true,                     // include legend
            true,                     // tooltips?
            false                     // URLs?
        );

        // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...

        // set the background color for the chart...
        chart.setBackgroundPaint(Color.white);

        // get a reference to the plot for further customisation...
        final CategoryPlot plot = chart.getCategoryPlot();
        plot.setBackgroundPaint(Color.lightGray);
        plot.setDomainGridlinePaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);

        // set the range axis to display integers only...
        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

        // disable bar outlines...
        final BarRenderer renderer = (BarRenderer) plot.getRenderer();
        renderer.setDrawBarOutline(false);
        
//        // set up gradient paints for series...
//        final GradientPaint gp0 = new GradientPaint(
//            0.0f, 0.0f, Color.blue, 
//            0.0f, 0.0f, Color.lightGray
//        );
//        final GradientPaint gp1 = new GradientPaint(
//            0.0f, 0.0f, Color.green, 
//            0.0f, 0.0f, Color.lightGray
//        );
//        final GradientPaint gp2 = new GradientPaint(
//            0.0f, 0.0f, Color.red, 
//            0.0f, 0.0f, Color.lightGray
//        );
        renderer.setSeriesPaint(0, Color.green); // correct
        renderer.setSeriesPaint(1, Color.red); // wrong
//        renderer.setSeriesPaint(2, Color.GREEN);

        final CategoryAxis domainAxis = plot.getDomainAxis();
        domainAxis.setCategoryLabelPositions(
            CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0)
        );
        // OPTIONAL CUSTOMISATION COMPLETED.
        
        return chart;
        
    }    
    
//    private void drawChart() {
//        this.removeAll();
//        // bar chart za klase
//        // na x osi klase klasifikacije
//        // na y osi za svaku klasu broj tacnih i pogresnih
//    
//        graphBuilder = (Graph2DBuilder) graphCombo.getSelectedItem();
//        graphBuilder.setAttribute1(in1);
//        graphBuilder.setAttribute2(in2);
//        ChartPanel chartPanel = graphBuilder.create();
//        jPanel1.add(chartPanel);
//
//        jPanel1.validate();        
//    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
