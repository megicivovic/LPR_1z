package org.neuroph.netbeans.charts;

import org.jzy3d.chart.Chart;
import org.jzy3d.colors.colormaps.ColorMapRainbow;
import org.jzy3d.plot3d.builder.Mapper;
import org.jzy3d.plot3d.rendering.canvas.Quality;
import org.netbeans.api.settings.ConvertAsProperties;
import org.neuroph.core.NeuralNetwork;
import org.nugs.graph3d.Chart3DUtils;
import org.nugs.graph3d.api.Point3D;
import org.nugs.graph3d.JzySurface3DFactory;
import org.nugs.graph3d.api.Surface3DFactory;
import org.nugs.graph3d.api.Surface3DProperties;
import org.neuroph.netbeans.charts.Bundle;
import org.neuroph.netbeans.charts.providers3d.WeightsDataProvider3D;
import org.neuroph.netbeans.charts.util.NeurophChartUtilities;
import org.neuroph.netbeans.charts.Bundle;
import org.nugs.graph3d.api.Range;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//org.nugs.neurophgraph//Surface//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "SurfaceTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "org.nugs.neurophgraph.SurfaceTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_SurfaceAction",
preferredID = "SurfaceTopComponent")
@Messages({
    "CTL_SurfaceAction=Surface",
    "CTL_SurfaceTopComponent=Weights surface 3D",
    "HINT_SurfaceTopComponent=This is a Weights surface 3D window"
})
public final class SurfaceTopComponent extends TopComponent {

    private static SurfaceTopComponent instance;
    private Point3D[] weights;
    private int lcount = 0; //layer count
    private int ccount = 0; // connction count
    private WeightsDataProvider3D provider;
    private int pointIdx = 1;

    public SurfaceTopComponent() {
        initComponents();
        setName(Bundle.CTL_SurfaceTopComponent());
        setToolTipText(Bundle.HINT_SurfaceTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        launcherButton = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 285, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(launcherButton, org.openide.util.NbBundle.getMessage(SurfaceTopComponent.class, "SurfaceTopComponent.launcherButton.text")); // NOI18N
        launcherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                launcherButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 286, Short.MAX_VALUE)
                .addComponent(launcherButton))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(launcherButton))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void launcherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_launcherButtonActionPerformed
        Chart3DUtils.openInChartLauncher(createCustomChart());

    }//GEN-LAST:event_launcherButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton launcherButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public static SurfaceTopComponent getInstance() {
        if (instance == null) {
            instance = new SurfaceTopComponent();
        }
        return instance;
    }

    private Chart createCustomChart() {
        pointIdx = 1;
        Surface3DProperties prop = new Surface3DProperties();
        prop.setChartColor(new ColorMapRainbow());
        prop.setChartQuality(Quality.Advanced);
        prop.setChartWireframed(true);
        prop.setxAxeInteger(true);
        prop.setyAxeInteger(true);
        prop.setxAxeLabel("Layer");
        prop.setyAxeLabel("Connection");
        prop.setzAxeLabel("Weight");
        prop.setxRange(new Range(1, lcount)); 
        prop.setyRange(new Range(1, ccount));
        Surface3DFactory<Chart> surfaceFactory = new JzySurface3DFactory();
        Chart chart = surfaceFactory.createSurface(new Mapper() {
            @Override
            public double f(double x, double y) {
                //  funkcija krive - koja vraca vrednost weights 
                for (int i = /*pointIdx*/1; i < weights.length; i++) {
                    Point3D point = weights[i];
                    
                    if ((point.getX() == (int) x) && (point.getY() == (int) y)) {
                        return point.getZ();
                    }
                }
                return 0;
            }
        }, prop);

        return chart;
    }

    public void openChart(NeuralNetwork nnet) {
        provider = new WeightsDataProvider3D(nnet);
        weights = provider.getData();
        weights = provider.addNewRow(weights);
        lcount = nnet.getLayersCount();
        ccount = NeurophChartUtilities.getMaxConnectionCount(nnet);
        Chart3DUtils.addChartToPanel(createCustomChart(), jPanel1);
    }
}
