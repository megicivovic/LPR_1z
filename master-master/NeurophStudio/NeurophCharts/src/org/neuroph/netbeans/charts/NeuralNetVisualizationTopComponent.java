package org.neuroph.netbeans.charts;

import java.awt.geom.Point2D;
import java.util.Collection;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import org.jfree.chart.ChartPanel;
import org.jzy3d.chart.Chart;
import org.netbeans.api.settings.ConvertAsProperties;
import org.neuroph.core.Layer;
import org.neuroph.core.NeuralNetwork;
import org.neuroph.core.data.DataSet;
import org.nugs.graph2d.JFreeLineChartFactory;
import org.nugs.graph2d.api.Graph2DProperties;
import org.nugs.graph2d.api.LineChartFactory;
import org.nugs.graph3d.Chart3DUtils;
import org.nugs.graph2d.api.Attribute;
import org.neuroph.netbeans.charts.graphs3d.ErrorForAttributeSurface3D;
import org.neuroph.netbeans.charts.graphs3d.ErrorSurface3D;
import org.neuroph.netbeans.charts.graphs3d.Graph3DBuilder;
import org.neuroph.netbeans.charts.graphs3d.OutputForAttributeSurface3D;
import org.neuroph.netbeans.charts.graphs3d.OutputSurface3D;
import org.nugs.graph2d.api.DataProvider2D;
import org.neuroph.netbeans.charts.providers2d.DatasetErrorDataProvider2D;
import org.neuroph.netbeans.charts.providers2d.DatasetOutputDataProvider2D;
import org.neuroph.netbeans.charts.providers2d.ErrorDataProvider2D;
import org.neuroph.netbeans.charts.providers2d.OutputDataProvider2D;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//org.nugs.neurophgraph//DataSetVisualization//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "DataSetVisualizationTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "org.nugs.neurophgraph.DataSetVisualizationTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_DataSetVisualizationAction",
preferredID = "DataSetVisualizationTopComponent")
@Messages({
    "CTL_DataSetVisualizationAction=DataSetVisualization",
    "CTL_DataSetVisualizationTopComponent=Network out/err for dataset",
    "HINT_DataSetVisualizationTopComponent=This is a Network out/err for dataset window"
})
public final class NeuralNetVisualizationTopComponent extends TopComponent implements LookupListener {

    private Lookup.Result<DataSet> trainingResultSets;
    private NeuralNetwork nnet;
    private DataSet dataset;
    int datasetRowCount;
    int outputNeuronCount;
    int attribute = -1;
    private Graph3DBuilder graphBuilder;
    private DataProvider2D provider2D;
    private Point2D[] data2D;

    public NeuralNetVisualizationTopComponent() {
        initComponents();
        setName(Bundle.CTL_DataSetVisualizationTopComponent());
        setToolTipText(Bundle.HINT_DataSetVisualizationTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        graphPanel = new javax.swing.JPanel();
        drawButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        datasetTextField = new javax.swing.JTextField();
        openInLauncherButton = new javax.swing.JButton();
        graphTypeCombo = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        attributeTxtField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        nnetField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        layerCombo = new javax.swing.JComboBox();

        graphPanel.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(drawButton, org.openide.util.NbBundle.getMessage(NeuralNetVisualizationTopComponent.class, "NeuralNetVisualizationTopComponent.drawButton.text")); // NOI18N
        drawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(NeuralNetVisualizationTopComponent.class, "NeuralNetVisualizationTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(NeuralNetVisualizationTopComponent.class, "NeuralNetVisualizationTopComponent.jLabel2.text")); // NOI18N

        datasetTextField.setText(org.openide.util.NbBundle.getMessage(NeuralNetVisualizationTopComponent.class, "NeuralNetVisualizationTopComponent.datasetTextField.text")); // NOI18N
        datasetTextField.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(openInLauncherButton, org.openide.util.NbBundle.getMessage(NeuralNetVisualizationTopComponent.class, "NeuralNetVisualizationTopComponent.openInLauncherButton.text")); // NOI18N
        openInLauncherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openInLauncherButtonActionPerformed(evt);
            }
        });

        graphTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "I" }));
        graphTypeCombo.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                graphTypeComboComponentShown(evt);
            }
        });
        graphTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphTypeComboActionPerformed(evt);
            }
        });
        graphTypeCombo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                graphTypeComboFocusGained(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(NeuralNetVisualizationTopComponent.class, "NeuralNetVisualizationTopComponent.jLabel3.text")); // NOI18N

        attributeTxtField.setText(org.openide.util.NbBundle.getMessage(NeuralNetVisualizationTopComponent.class, "NeuralNetVisualizationTopComponent.attributeTxtField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(NeuralNetVisualizationTopComponent.class, "NeuralNetVisualizationTopComponent.jLabel4.text")); // NOI18N

        nnetField.setText(org.openide.util.NbBundle.getMessage(NeuralNetVisualizationTopComponent.class, "NeuralNetVisualizationTopComponent.nnetField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(NeuralNetVisualizationTopComponent.class, "NeuralNetVisualizationTopComponent.jLabel5.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(graphTypeCombo, 0, 278, Short.MAX_VALUE)
                            .addComponent(nnetField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(attributeTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(layerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(drawButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(datasetTextField)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(openInLauncherButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(graphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 901, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 16, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(datasetTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(nnetField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(attributeTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(graphTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(drawButton)
                    .addComponent(jLabel5)
                    .addComponent(layerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(graphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openInLauncherButton)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void drawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawButtonActionPerformed

        graphPanel.removeAll();
        if (validateAttribute(attributeTxtField)) {
            fillAttributes();
            if (datasetRowCount >= 2 && outputNeuronCount >= 2) {
                visualize3D();
            } else {
                visualize2D();
            }
        }
        // hack to resolve combo box repainting issue, ahter chart ias added
        WindowManager.getDefault().findTopComponent("projectTabLogical_tc").requestActive();
        this.requestActive();
    }//GEN-LAST:event_drawButtonActionPerformed

    private void openInLauncherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openInLauncherButtonActionPerformed

        graphBuilder = (Graph3DBuilder) graphTypeCombo.getSelectedItem();
        Chart3DUtils.openInChartLauncher((Chart) graphBuilder.createGraph());

    }//GEN-LAST:event_openInLauncherButtonActionPerformed

    private void graphTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphTypeComboActionPerformed

        graphBuilder = (Graph3DBuilder) graphTypeCombo.getSelectedItem();
        if (graphBuilder instanceof ErrorForAttributeSurface3D) {
            attributeTxtField.setEnabled(true);
            layerCombo.setEnabled(false);
        }
        if (graphBuilder instanceof OutputForAttributeSurface3D) {
            attributeTxtField.setEnabled(true);
            layerCombo.setEnabled(true);
        }
        if (graphBuilder instanceof ErrorSurface3D) {
            attributeTxtField.setEnabled(false);
            layerCombo.setEnabled(false);
        }
        if (graphBuilder instanceof OutputSurface3D) {
            attributeTxtField.setEnabled(false);
            layerCombo.setEnabled(true);
        }
    }//GEN-LAST:event_graphTypeComboActionPerformed

    private void graphTypeComboComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_graphTypeComboComponentShown
    }//GEN-LAST:event_graphTypeComboComponentShown

    private void graphTypeComboFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_graphTypeComboFocusGained
        graphTypeCombo.repaint();
    }//GEN-LAST:event_graphTypeComboFocusGained

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField attributeTxtField;
    private javax.swing.JTextField datasetTextField;
    private javax.swing.JButton drawButton;
    private javax.swing.JPanel graphPanel;
    private javax.swing.JComboBox graphTypeCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox layerCombo;
    private javax.swing.JTextField nnetField;
    private javax.swing.JButton openInLauncherButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        TopComponent projWindow = WindowManager.getDefault().findTopComponent("projectTabLogical_tc");
        trainingResultSets = projWindow.getLookup().lookupResult(DataSet.class);
        trainingResultSets.addLookupListener(this);
        resultChanged(new LookupEvent(trainingResultSets));
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public void orderForm(NeuralNetwork nnet) {
        drawButton.setEnabled(false);
        openInLauncherButton.setEnabled(false);
        this.nnet = nnet;
        graphTypeCombo.removeAllItems();
        layerCombo.removeAllItems();
        datasetTextField.setEditable(false);
        nnetField.setEditable(false);
        nnetField.setText(nnet.getLabel());
        Layer[] layers = nnet.getLayers();
        for (int i = layers.length; i > 0; i--) {
            layerCombo.addItem(i);
        }
    }

    @Override
    public void resultChanged(LookupEvent le) {
        Lookup.Result r = (Lookup.Result) le.getSource();
        Collection c = r.allInstances();
        if (!c.isEmpty()) {
            dataset = (DataSet) c.iterator().next();
            datasetTextField.setEnabled(true);
            datasetTextField.setText(dataset.getLabel());
            graphTypeCombo.removeAllItems();
            if (nnet != null && dataset != null) {
                graphTypeCombo.addItem(new OutputSurface3D(nnet, dataset));
                graphTypeCombo.addItem(new ErrorSurface3D(nnet, dataset));
                graphTypeCombo.addItem(new OutputForAttributeSurface3D(nnet, dataset));
                graphTypeCombo.addItem(new ErrorForAttributeSurface3D(nnet, dataset));
                datasetRowCount = dataset.getRows().size();
                drawButton.setEnabled(true);
            }
        }
    }

    private void visualize3D() {
        graphBuilder = (Graph3DBuilder) graphTypeCombo.getSelectedItem();
        Chart3DUtils.addChartToPanel((Chart) graphBuilder.createGraph(), graphPanel);
        jPanel1.revalidate();
        openInLauncherButton.setEnabled(true);
    }

    private void visualize2D() {
        JOptionPane.showMessageDialog(this, "The number of output neurons is one, this is going to be visualized in 2D.");
        changeProvider();
        Graph2DProperties prop = new Graph2DProperties(provider2D.toString(), provider2D.getXLabel(), provider2D.getYLabel());
        prop.setTooltipsVisible(true);
        data2D = provider2D.getData();
        
        LineChartFactory<ChartPanel> chart2DFactory = new JFreeLineChartFactory();
        ChartPanel chartPanel = chart2DFactory.createLineChart(data2D, prop);
        graphPanel.add(chartPanel);
        revalidate();
    }

    private void fillAttributes() {
        int layerIdx = nnet.getLayersCount() - 1; // output layerIdx by default
        Attribute attr1;
        Attribute attr2 = null;
        if (layerCombo.isEnabled()) {
            layerIdx = (Integer) layerCombo.getSelectedItem() -1;
        }
        attr1 = new Attribute(layerIdx, false, "Layer");
        if (attributeTxtField.isEnabled()) {
            attribute = Integer.parseInt(attributeTxtField.getText());
            attr2 = new Attribute(attribute, false, "Input");
        }
        graphBuilder.setAttribute1(attr1);
        graphBuilder.setAttribute2(attr2);
        outputNeuronCount = nnet.getLayerAt(layerIdx).getNeuronsCount();

    }

    private void changeProvider() {
        if (graphBuilder instanceof ErrorSurface3D) {
            provider2D = new ErrorDataProvider2D(dataset, nnet);
        }
        if (graphBuilder instanceof OutputSurface3D) {
            provider2D = new OutputDataProvider2D(dataset, nnet);
        }
        if (graphBuilder instanceof OutputForAttributeSurface3D) {
            provider2D = new DatasetOutputDataProvider2D(dataset, nnet);
            ((DatasetOutputDataProvider2D) provider2D).setAttribute(Integer.parseInt(attributeTxtField.getText()));
        }
        if (graphBuilder instanceof ErrorForAttributeSurface3D) {
            provider2D = new DatasetErrorDataProvider2D(dataset, nnet);
            ((DatasetErrorDataProvider2D) provider2D).setAttribute(Integer.parseInt(attributeTxtField.getText()));

        }
    }

    private boolean validateAttribute(JTextField attributeField) {
        if (attributeField.isEnabled()) {
            try {
                int a = Integer.parseInt(attributeField.getText().trim());
                if (a > nnet.getInputsCount() || a <= 0) {
                    JOptionPane.showMessageDialog(this, "There is no data set attribute (input) with index: " + a, "Error", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                return true;
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Please enter an integer value in attribute field.", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        return true;
    }
}
