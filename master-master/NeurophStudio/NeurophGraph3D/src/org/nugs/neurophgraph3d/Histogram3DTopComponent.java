/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.nugs.neurophgraph3d;

import org.jzy3d.chart.Chart;
import org.jzy3d.factories.AxeFactory;
import org.netbeans.api.settings.ConvertAsProperties;
import org.neuroph.core.NeuralNetwork;
import org.neuroph.core.Neuron;
import org.nugs.graph3d.Chart3DUtils;
import org.nugs.graph3d.Hist3DFactory;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//org.nugs.neurophgraph3d//Histogram3D//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "Histogram3DTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "org.nugs.neurophgraph3d.Histogram3DTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_Histogram3DAction",
preferredID = "Histogram3DTopComponent")
@Messages({
    "CTL_Histogram3DAction=Histogram3D",
    "CTL_Histogram3DTopComponent=Histogram3D Window",
    "HINT_Histogram3DTopComponent=This is a Histogram3D window"
})
public final class Histogram3DTopComponent extends TopComponent {
    
    private static Histogram3DTopComponent instance;
    private double[][]weights;
    private NeuralNetwork nnet;

    public Histogram3DTopComponent() {
        initComponents();
        setName(Bundle.CTL_Histogram3DTopComponent());
        setToolTipText(Bundle.HINT_Histogram3DTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        launcherButton = new javax.swing.JButton();

        jPanel1.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(launcherButton, org.openide.util.NbBundle.getMessage(Histogram3DTopComponent.class, "Histogram3DTopComponent.launcherButton.text")); // NOI18N
        launcherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                launcherButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 286, Short.MAX_VALUE)
                .addComponent(launcherButton))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(launcherButton))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void launcherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_launcherButtonActionPerformed

        Chart chart = Hist3DFactory.createHistogram(weights);
        chart.getAxeLayout().setXAxeLabel("Layer");
        chart.getAxeLayout().setYAxeLabel("Connection");
        chart.getAxeLayout().setZAxeLabel("Weight");
        Chart3DUtils.openInChartLauncher(chart);
        
        
    }//GEN-LAST:event_launcherButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton launcherButton;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
     public static Histogram3DTopComponent getInstance() {
        if (instance == null) {
            instance = new Histogram3DTopComponent();
        }
        return instance;
    }

    private double[][] getWeights(NeuralNetwork nnet) {
        if (nnet != null) {

            this.nnet = nnet;

            //Popunjavam niz height[][] i saljem openInChartLauncher metodi Hist3DFactory
            weights = new double[nnet.getLayersCount()][NeurophChartUtilities.getMaxConnectionCount(nnet)]; //getMaxConnCount()

            for (int i = 0; i < nnet.getLayers().length; i++) {

                for (Neuron neuron : nnet.getLayers()[i].getNeurons()) {
                    for (int j = 0; j < neuron.getInputConnections().length; j++) {

                        weights[i][j] = neuron.getInputConnections()[j].getWeight().value;

                    }
                }
            }
            return weights;
        }
        throw new RuntimeException("No neural network.");
    }

    public void makeHistogram(NeuralNetwork nnet) {
        //Biblioteka u akciji!
        weights = getWeights(nnet);
        Chart chart = Hist3DFactory.createHistogram(weights);
        chart.getAxeLayout().setXAxeLabel("Layer");
        chart.getAxeLayout().setYAxeLabel("Connection");
        chart.getAxeLayout().setZAxeLabel("Weight");
        
        Chart3DUtils.createChartPanel(chart, jPanel1);
    }
}
