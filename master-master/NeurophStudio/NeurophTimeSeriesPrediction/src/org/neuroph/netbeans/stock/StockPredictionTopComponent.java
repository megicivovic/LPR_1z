/*
 * Stock Prediction with graph top component
 * @author 0rbN30n
 */
package org.neuroph.netbeans.stock;

import java.awt.Color;
import java.util.Collection;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.netbeans.api.settings.ConvertAsProperties;
import org.neuroph.core.NeuralNetwork;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//org.neuroph.netbeans.stock//StockPrediction//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "StockPredictionTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.neuroph.netbeans.stock.StockPredictionTopComponent")
@ActionReference(path = "Menu/Window/Prediction" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_StockPredictionAction",
preferredID = "StockPredictionTopComponent")
@Messages({
    "CTL_StockPredictionAction=Stock Prediction",
    "CTL_StockPredictionTopComponent=Stock Prediction Window",
    "HINT_StockPredictionTopComponent=This is a Stock Prediction window"
})
public final class StockPredictionTopComponent extends TopComponent implements LookupListener {

    private NeuralNetwork activeNeuralNetwork;
    Lookup.Result<NeuralNetwork> neuralNetResultSets;
    private int inputNeuronsCount;
    private int outputNeuronsCount;

    public StockPredictionTopComponent() {
        initComponents();
        setName(Bundle.CTL_StockPredictionTopComponent());
        setToolTipText(Bundle.HINT_StockPredictionTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNN = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtInput = new javax.swing.JTextField();
        btnPredict = new javax.swing.JButton();
        chartPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        predictedValueField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        normScaleField = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(StockPredictionTopComponent.class, "StockPredictionTopComponent.jLabel1.text")); // NOI18N

        txtNN.setEditable(false);
        txtNN.setText(org.openide.util.NbBundle.getMessage(StockPredictionTopComponent.class, "StockPredictionTopComponent.txtNN.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(StockPredictionTopComponent.class, "StockPredictionTopComponent.jLabel2.text")); // NOI18N

        txtInput.setText(org.openide.util.NbBundle.getMessage(StockPredictionTopComponent.class, "StockPredictionTopComponent.txtInput.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnPredict, org.openide.util.NbBundle.getMessage(StockPredictionTopComponent.class, "StockPredictionTopComponent.btnPredict.text")); // NOI18N
        btnPredict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPredictActionPerformed(evt);
            }
        });

        chartPanel.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(StockPredictionTopComponent.class, "StockPredictionTopComponent.jLabel3.text")); // NOI18N

        predictedValueField.setEditable(false);
        predictedValueField.setText(org.openide.util.NbBundle.getMessage(StockPredictionTopComponent.class, "StockPredictionTopComponent.predictedValueField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(StockPredictionTopComponent.class, "StockPredictionTopComponent.jLabel4.text")); // NOI18N

        normScaleField.setText(org.openide.util.NbBundle.getMessage(StockPredictionTopComponent.class, "StockPredictionTopComponent.normScaleField.text")); // NOI18N

        javax.swing.GroupLayout btnPanelLayout = new javax.swing.GroupLayout(btnPanel);
        btnPanel.setLayout(btnPanelLayout);
        btnPanelLayout.setHorizontalGroup(
            btnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(btnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(btnPanelLayout.createSequentialGroup()
                        .addGroup(btnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(btnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNN, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(normScaleField, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(btnPanelLayout.createSequentialGroup()
                        .addGroup(btnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(22, 22, 22)
                        .addGroup(btnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(predictedValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(btnPanelLayout.createSequentialGroup()
                                .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPredict)))))
                .addContainerGap())
        );
        btnPanelLayout.setVerticalGroup(
            btnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(btnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(btnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(normScaleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(btnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPredict)
                    .addGroup(btnPanelLayout.createSequentialGroup()
                        .addGroup(btnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(3, 3, 3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(btnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(predictedValueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(16, 16, 16)
                .addComponent(chartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(58, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnPredictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPredictActionPerformed
        String inputString = txtInput.getText();
        if (!inputString.equals("")) {
            String[] inputStringArr = inputString.split(" ");
            int count = inputStringArr.length;
            double[] inputDoubleArr = new double[count];
            double[] inputDoubleArrNorm = new double[count];
            
            double normScale = 1;
            
            try {
             normScale = Double.parseDouble( normScaleField.getText().trim() );
                    // StockPredictionManager.getInstance().getNormalizationScale();
            }  catch (NumberFormatException e) {
                JOptionPane.showConfirmDialog(this,
                        "Warning: Please enter only numeric valueres",
                        "Wrong number format", JOptionPane.WARNING_MESSAGE);
            }
            
            try {                
                for (int i = 0; i < count; i++) {
                    inputDoubleArr[i] = Double.parseDouble(inputStringArr[i]);
                    inputDoubleArrNorm[i] = inputDoubleArr[i] / normScale;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showConfirmDialog(this,
                        "Warning: Please enter only real numbers separated with space",
                        "Wrong number format", JOptionPane.WARNING_MESSAGE);
            }
            if (inputDoubleArr.length == inputNeuronsCount) {
                chartPanel.removeAll();
                activeNeuralNetwork.setInput(inputDoubleArrNorm);
                activeNeuralNetwork.calculate();
                double[] outputDoubleArr = activeNeuralNetwork.getOutput();
                double[] outputDoubleArrReal = new double[outputDoubleArr.length];
                for(int i = 0 ; i < outputDoubleArr.length; i++) {
                    outputDoubleArrReal[i] = outputDoubleArr[i] * normScale;
                }
                double d = outputDoubleArr[0] * normScale;
                
                chartPanel.add(createChart(createDataset(inputDoubleArr, outputDoubleArrReal), "Prediction graph for " + txtNN.getText()));
                chartPanel.getParent().validate();
                chartPanel.getParent().repaint();
                
                predictedValueField.setText(""+d);
            } else {
                JOptionPane.showConfirmDialog(this,
                        "Warning: Wrong number of input parameters: " + inputNeuronsCount
                        + " expected, " + inputDoubleArr.length + "found",
                        "Training set not selected",
                        JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showConfirmDialog(this,
                    "Warning: Please enter the input parameters",
                    "No input", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnPredictActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel btnPanel;
    private javax.swing.JButton btnPredict;
    private javax.swing.JPanel chartPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField normScaleField;
    private javax.swing.JTextField predictedValueField;
    private javax.swing.JTextField txtInput;
    private javax.swing.JTextField txtNN;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // Listening the Project Explorers Lookup
        neuralNetResultSets = WindowManager.getDefault().findTopComponent("projectTabLogical_tc").getLookup().lookupResult(NeuralNetwork.class);
        neuralNetResultSets.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        neuralNetResultSets.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent le) {
        Lookup.Result r = (Lookup.Result) le.getSource();
        Collection c = r.allInstances();
        if (!c.isEmpty()) {
            activeNeuralNetwork = (NeuralNetwork) c.iterator().next();
            txtNN.setText(activeNeuralNetwork.toString());
        }
        inputNeuronsCount = activeNeuralNetwork.getInputNeurons().length;
        outputNeuronsCount = activeNeuralNetwork.getOutputNeurons().length;
    }
    // Creates dataset for chart - needs a bit more work
    private static XYSeriesCollection createDataset(double[] inputArr, double[] outputArr) {
        XYSeriesCollection dataset = new XYSeriesCollection();
        XYSeries inputSeries = new XYSeries("Input");
        XYSeries outputSeries = new XYSeries("Output");
        for (int i = 0; i < inputArr.length; i++) {
            inputSeries.add(i+1, inputArr[i]);
        }
        outputSeries.add(inputArr.length,inputArr[inputArr.length-1]);
        for (int i = 1; i <= outputArr.length; i++) {
            outputSeries.add(inputArr.length+i, outputArr[i-1]);
        }
        dataset.addSeries(inputSeries);
        dataset.addSeries(outputSeries);
        return dataset;
    }
    // returns new panel populated with chart and dataset
    private static ChartPanel createChart(XYDataset dataset, String title) {
        ChartPanel panel;
        JFreeChart chart = ChartFactory.createXYLineChart(
                title,
                "Time series",
                "Values",
                dataset,
                PlotOrientation.VERTICAL,
                true,
                true,
                false);
        chart.setBackgroundPaint(Color.white);
        // Further custimisation uses the plot reference
        XYPlot plot = (XYPlot) chart.getPlot();
        plot.setBackgroundPaint(Color.lightGray);
        //plot.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 5.0));
        plot.setDomainGridlinePaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);
        // change the auto tick unit selection to integer units only...
        NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();
        domainAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        // OPTIONAL CUSTOMISATION COMPLETED.
        panel = new ChartPanel(chart);
        panel.setPreferredSize(new java.awt.Dimension(500, 270));
        return panel;
    }
}
