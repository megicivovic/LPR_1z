package org.neuroph.netbeans.stock.wizard;

import java.util.List;
import javax.swing.JPanel;
import org.neuroph.netbeans.stock.StockPredictionManager;

public final class SPredictionVisualPanel3 extends JPanel {

    /** Creates new form SPredictionVisualPanel3 */
    public SPredictionVisualPanel3() {
        initComponents();
        //setComboBox();
        txtInputneuros.setEnabled(false);
    }

   @Override
    public String getName() {
        return "Set Neural Network Params";
    }

   public javax.swing.JTextField getTxtNetworkLabel(){
        return txtNetworkLabel;
    }

   public javax.swing.JComboBox getComboTransfer(){
        return comboTransfer;
    }

    public javax.swing.JTextField getTxtInputneuros(){
        return txtInputneuros;
    }

    public javax.swing.JTextField getTxtHiddenNeuros(){
        return txtHiddenNeuros;
    }

    public javax.swing.JTextField getTxtOutputneuros(){
        return txtOutputneuros;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtOutputneuros = new javax.swing.JTextField();
        txtInputneuros = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        comboTransfer = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtHiddenNeuros = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtNetworkLabel = new javax.swing.JTextField();

        txtOutputneuros.setText(org.openide.util.NbBundle.getMessage(SPredictionVisualPanel3.class, "SPredictionVisualPanel3.txtOutputneuros.text")); // NOI18N

        txtInputneuros.setText(org.openide.util.NbBundle.getMessage(SPredictionVisualPanel3.class, "SPredictionVisualPanel3.txtInputneuros.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(SPredictionVisualPanel3.class, "SPredictionVisualPanel3.jLabel3.text")); // NOI18N

        comboTransfer.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sigmoid", "Tanh" }));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(SPredictionVisualPanel3.class, "SPredictionVisualPanel3.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(SPredictionVisualPanel3.class, "SPredictionVisualPanel3.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(SPredictionVisualPanel3.class, "SPredictionVisualPanel3.jLabel2.text")); // NOI18N

        txtHiddenNeuros.setText(org.openide.util.NbBundle.getMessage(SPredictionVisualPanel3.class, "SPredictionVisualPanel3.txtHiddenNeuros.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel11, org.openide.util.NbBundle.getMessage(SPredictionVisualPanel3.class, "SPredictionVisualPanel3.jLabel11.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(28, 28, 28)
                        .addComponent(txtNetworkLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboTransfer, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtInputneuros, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(txtOutputneuros, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtHiddenNeuros, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(148, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtNetworkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(comboTransfer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtInputneuros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtHiddenNeuros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtOutputneuros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(103, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboTransfer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField txtHiddenNeuros;
    private javax.swing.JTextField txtInputneuros;
    private javax.swing.JTextField txtNetworkLabel;
    private javax.swing.JTextField txtOutputneuros;
    // End of variables declaration//GEN-END:variables

     private void setComboBox() {
        StockPredictionManager smib = StockPredictionManager.getInstance();
        List<TransferFunction> tf = smib.getTransferFunctions();
        comboTransfer.removeAllItems();
        for(TransferFunction function : tf){
            comboTransfer.addItem(function);
        }
    }
}

