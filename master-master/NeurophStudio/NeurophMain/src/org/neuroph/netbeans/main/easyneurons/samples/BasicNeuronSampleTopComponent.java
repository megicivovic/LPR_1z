package org.neuroph.netbeans.main.easyneurons.samples;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.text.DecimalFormat;
import java.util.logging.Logger;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.neuroph.core.Neuron;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.neuroph.netbeans.main.easyneurons.samples//BasicNeuronSample//EN",
autostore = false)
public final class BasicNeuronSampleTopComponent extends TopComponent {
    Neuron neuron;
    

    private static BasicNeuronSampleTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "BasicNeuronSampleTopComponent";

    public BasicNeuronSampleTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(BasicNeuronSampleTopComponent.class, "CTL_BasicNeuronSampleTopComponent"));
        setToolTipText(NbBundle.getMessage(BasicNeuronSampleTopComponent.class, "HINT_BasicNeuronSampleTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);
	neuron = new Neuron();
//        neuronPanel.add(new BasicNeuronPanel());
//	neuronPanel.revalidate();
    }

	public void calculateNeuron() {
		double i1 = Double.parseDouble(inputField1.getText().trim());
		double i2 = Double.parseDouble(inputField2.getText().trim());

		double w1 = Double.parseDouble(weightField1.getText().trim());
		double w2 = Double.parseDouble(weightField2.getText().trim());

		double totalInput = w1*i1 + w2*i2;
		neuron.setInput(totalInput);
		neuron.calculate();
		double output = neuron.getOutput();

		inputFunctionField.setText((new DecimalFormat("#0.00")).format(totalInput));
		outputField.setText((new DecimalFormat("#0.00")).format(output));
		repaint();
	}

    @Override
    protected void paintComponent(Graphics g) {
	    Graphics2D g2d =(Graphics2D)g;
	    g2d.setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

	double output = neuron.getOutput();
	int colorIntensity = 200 - Math.abs( (int)(output*100)*2);
	if (colorIntensity > 200 ) colorIntensity = 200;
	if (colorIntensity < 0 ) colorIntensity = 0;

	   if (output>0) {
			g2d.setColor( new Color(255, colorIntensity, colorIntensity));
		} else if (output<0) {
			g2d.setColor( new Color(colorIntensity, colorIntensity, 255));
		} else {
			g2d.setColor( new Color(102, 102, 102));
		}

	    g2d.fillOval(40, 40, 240, 240);

	    g2d.setColor( new Color(0, 0, 0));
	    g2d.drawLine(160, 170, 80, 340);
	    g2d.drawLine(160, 170, 250, 340);
	    g2d.drawLine(160, 25, 160, 170);

//            super.repaint(); // sa ovim radi super, da li moze bez ovoga???
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        weightField1 = new javax.swing.JTextField();
        inputField1 = new javax.swing.JTextField();
        inputField2 = new javax.swing.JTextField();
        weightField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        outputField = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        inputFunctionField = new javax.swing.JTextField();
        calculateButton = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(BasicNeuronSampleTopComponent.class, "BasicNeuronSampleTopComponent.jLabel5.text")); // NOI18N
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(27, 295, -1, -1));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(BasicNeuronSampleTopComponent.class, "BasicNeuronSampleTopComponent.jLabel3.text")); // NOI18N
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 263, -1, -1));

        weightField1.setColumns(6);
        weightField1.setText(org.openide.util.NbBundle.getMessage(BasicNeuronSampleTopComponent.class, "BasicNeuronSampleTopComponent.weightField1.text")); // NOI18N
        add(weightField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(72, 260, -1, -1));

        inputField1.setColumns(6);
        inputField1.setText(org.openide.util.NbBundle.getMessage(BasicNeuronSampleTopComponent.class, "BasicNeuronSampleTopComponent.inputField1.text")); // NOI18N
        add(inputField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(72, 292, -1, -1));

        inputField2.setColumns(6);
        inputField2.setText(org.openide.util.NbBundle.getMessage(BasicNeuronSampleTopComponent.class, "BasicNeuronSampleTopComponent.inputField2.text")); // NOI18N
        add(inputField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 290, -1, -1));

        weightField2.setColumns(6);
        weightField2.setText(org.openide.util.NbBundle.getMessage(BasicNeuronSampleTopComponent.class, "BasicNeuronSampleTopComponent.weightField2.text")); // NOI18N
        add(weightField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 260, -1, -1));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(BasicNeuronSampleTopComponent.class, "BasicNeuronSampleTopComponent.jLabel4.text")); // NOI18N
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 260, -1, -1));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(BasicNeuronSampleTopComponent.class, "BasicNeuronSampleTopComponent.jLabel6.text")); // NOI18N
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 300, -1, -1));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(BasicNeuronSampleTopComponent.class, "BasicNeuronSampleTopComponent.jLabel9.text")); // NOI18N
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(106, 14, -1, -1));

        outputField.setColumns(6);
        outputField.setEditable(false);
        add(outputField, new org.netbeans.lib.awtextra.AbsoluteConstraints(144, 11, -1, -1));

        jPanel3.setOpaque(false);

        jPanel1.setBackground(new java.awt.Color(102, 204, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(BasicNeuronSampleTopComponent.class, "BasicNeuronSampleTopComponent.jLabel7.text")); // NOI18N
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        jPanel2.setBackground(new java.awt.Color(255, 204, 51));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(BasicNeuronSampleTopComponent.class, "BasicNeuronSampleTopComponent.jLabel1.text")); // NOI18N
        jPanel2.add(jLabel1);

        inputFunctionField.setColumns(6);
        inputFunctionField.setEditable(false);
        jPanel2.add(inputFunctionField);

        org.openide.awt.Mnemonics.setLocalizedText(calculateButton, org.openide.util.NbBundle.getMessage(BasicNeuronSampleTopComponent.class, "BasicNeuronSampleTopComponent.calculateButton.text")); // NOI18N
        calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 196, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(calculateButton)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(calculateButton)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, -1, 170));
    }// </editor-fold>//GEN-END:initComponents

    private void calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateButtonActionPerformed
        calculateNeuron();
}//GEN-LAST:event_calculateButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calculateButton;
    private javax.swing.JTextField inputField1;
    private javax.swing.JTextField inputField2;
    private javax.swing.JTextField inputFunctionField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField outputField;
    private javax.swing.JTextField weightField1;
    private javax.swing.JTextField weightField2;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized BasicNeuronSampleTopComponent getDefault() {
        if (instance == null) {
            instance = new BasicNeuronSampleTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the BasicNeuronSampleTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized BasicNeuronSampleTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(BasicNeuronSampleTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof BasicNeuronSampleTopComponent) {
            return (BasicNeuronSampleTopComponent) win;
        }
        Logger.getLogger(BasicNeuronSampleTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }
}
