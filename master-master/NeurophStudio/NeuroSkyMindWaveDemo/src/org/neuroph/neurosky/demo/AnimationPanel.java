package org.neuroph.neurosky.demo;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;

/**
 * This class provides a panel to move image left or right controlled by MindWave
 * Provides double buffering to make smooth animation
 * @author zoran
 */
public class AnimationPanel extends javax.swing.JPanel {
    
    /**
     * Backgound
     */
    BufferedImage backgroundImage;    
    
    /**
     * image to draw with its double buffers
     */
    Image buffImage, animatedImage;
    Graphics graphicsBuff;

    int xPos , startY = 30;    
    
    // current x and y position to draw image
    int currentXPos = 250;
    int currentYPos = 180;     
    
    /**
     * Creates new form AnimationPanel
     */
    public AnimationPanel() {        
        initComponents();
    }
    
    /**
     * The actual drawing is done here: ot draws buffered image to panel
     * @param g 
     */
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.drawImage(buffImage, 0, 0, null);
    }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
      
    }//GEN-LAST:event_formComponentShown

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    void init() {
        buffImage = createImage(getWidth(), getHeight());
        graphicsBuff = buffImage.getGraphics();
        
        graphicsBuff.setColor(Color.WHITE);
        graphicsBuff.fillRect(0, 0, getWidth(), getHeight());
        
        // create image that will be moved as buffered image
        animatedImage = createImage(100, 100);
        Graphics gBuff0 = animatedImage.getGraphics();
        gBuff0.setColor(Color.RED);
        gBuff0.fillRect(0, 0, 100, 100);        
                
        // draw image at current x, y position
        graphicsBuff.drawImage(animatedImage, currentXPos, currentYPos, null);
        repaint();
    }
    
    // moves image to the lef
    public void left() {
        // if we're at the leftmost position, we have nowhere to go
        if (currentXPos <= 20) return;
        
        // otherwise move to the left by step - decrease current x position
        currentXPos -= 20;
        
        // draw background (clears bacgground to be white)
        graphicsBuff.setColor(Color.WHITE);
        graphicsBuff.fillRect(0, 0, getWidth(), getHeight());
        
        // draw image at current x, y position
        graphicsBuff.drawImage(animatedImage, currentXPos, currentYPos, null);
        
        // now repaint panel
        repaint();        
        
    }
    
    // moves image to the right
    public void right() {
        // if we're at the rightmost position than we have nowhere to go
        if (currentXPos >= (getWidth()- 120)) return;        
        
        // otherwise move to the right by increasing current x position
        currentXPos += 20;
        
        // draw background (clears bacgground to be white)
        graphicsBuff.setColor(Color.WHITE);
        graphicsBuff.fillRect(0, 0, getWidth(), getHeight());
        
        // draw image at current x, y position
        graphicsBuff.drawImage(animatedImage, currentXPos, currentYPos, null);
        
        // now repaint panel
        repaint();                
    }
    
}
