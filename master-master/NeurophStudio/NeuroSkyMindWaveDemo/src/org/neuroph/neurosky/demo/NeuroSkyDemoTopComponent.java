package org.neuroph.neurosky.demo;

import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Collection;
import java.util.logging.Logger;
import org.netbeans.api.settings.ConvertAsProperties;
import org.neuroph.bci.mindwave.MindWaveManager;
import org.neuroph.bci.mindwave.MindWaveSample;
import org.neuroph.bci.mindwave.event.MindWaveEvent;
import org.neuroph.bci.mindwave.event.MindWaveEventListener;
import org.neuroph.core.NeuralNetwork;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.windows.WindowManager;

/**
 * Main window for NeuroSky demo - a brain wave controlled animation 
 */
@ConvertAsProperties(
        dtd = "-//org.neuroph.neurosky.demo//NeuroSkyDemo//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "NeuroSkyDemoTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.neuroph.neurosky.demo.NeuroSkyDemoTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_NeuroSkyDemoAction",
        preferredID = "NeuroSkyDemoTopComponent")
@Messages({
    "CTL_NeuroSkyDemoAction=NeuroSkyDemo",
    "CTL_NeuroSkyDemoTopComponent=NeuroSkyDemo Window",
    "HINT_NeuroSkyDemoTopComponent=This is a NeuroSkyDemo window"
})
public final class NeuroSkyDemoTopComponent extends TopComponent implements MindWaveEventListener, LookupListener  {
    MindWaveController controller;
    NeuralNetwork selectedNeuralNetwork;
    
    private static NeuroSkyDemoTopComponent instance;
    
    public static synchronized NeuroSkyDemoTopComponent getDefault() {
        if (instance == null) {
            instance = new NeuroSkyDemoTopComponent();
        }
        return instance;
    }    
    
    public static synchronized NeuroSkyDemoTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent("NeuroSkyDemoTopComponent" );
        if (win == null) {
            Logger.getLogger(NeuroSkyDemoTopComponent.class.getName()).warning(
                    "Cannot find " + "NeuroSkyDemoTopComponent" + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof NeuroSkyDemoTopComponent) {
            return (NeuroSkyDemoTopComponent) win;
        }
        Logger.getLogger(NeuroSkyDemoTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + "NeuroSkyDemoTopComponent"
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }       
    
    // add bci connector /listener
    // on each packet recived triger event to recognize action and do left, right or no action
    

    public NeuroSkyDemoTopComponent() {
        initComponents();
        setName(Bundle.CTL_NeuroSkyDemoTopComponent());
        setToolTipText(Bundle.HINT_NeuroSkyDemoTopComponent());

    }
    
    // add lookup listener for selected neural network
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        normScaleField = new javax.swing.JTextField();
        animationPanel1 = new org.neuroph.neurosky.demo.AnimationPanel();
        rightButton = new javax.swing.JButton();
        leftButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        jLabel1.setForeground(javax.swing.UIManager.getDefaults().getColor("Button.foreground"));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(NeuroSkyDemoTopComponent.class, "NeuroSkyDemoTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(NeuroSkyDemoTopComponent.class, "NeuroSkyDemoTopComponent.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(NeuroSkyDemoTopComponent.class, "NeuroSkyDemoTopComponent.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(NeuroSkyDemoTopComponent.class, "NeuroSkyDemoTopComponent.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(startButton, org.openide.util.NbBundle.getMessage(NeuroSkyDemoTopComponent.class, "NeuroSkyDemoTopComponent.startButton.text")); // NOI18N
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(NeuroSkyDemoTopComponent.class, "NeuroSkyDemoTopComponent.jLabel5.text")); // NOI18N

        normScaleField.setText(org.openide.util.NbBundle.getMessage(NeuroSkyDemoTopComponent.class, "NeuroSkyDemoTopComponent.normScaleField.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(normScaleField))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(46, 46, 46)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(startButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(normScaleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        animationPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout animationPanel1Layout = new javax.swing.GroupLayout(animationPanel1);
        animationPanel1.setLayout(animationPanel1Layout);
        animationPanel1Layout.setHorizontalGroup(
            animationPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 661, Short.MAX_VALUE)
        );
        animationPanel1Layout.setVerticalGroup(
            animationPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 220, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(rightButton, org.openide.util.NbBundle.getMessage(NeuroSkyDemoTopComponent.class, "NeuroSkyDemoTopComponent.rightButton.text")); // NOI18N
        rightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(leftButton, org.openide.util.NbBundle.getMessage(NeuroSkyDemoTopComponent.class, "NeuroSkyDemoTopComponent.leftButton.text")); // NOI18N
        leftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(NeuroSkyDemoTopComponent.class, "NeuroSkyDemoTopComponent.jLabel6.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(leftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(animationPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(animationPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(leftButton)
                            .addComponent(rightButton))))
                .addGap(23, 23, 23))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    private double[] readNormalizationScaleFactorsfromFile(String fileName) {
        double[] normScaleFactors = new double[10];
        
        File file= new File(fileName);
        try {
            DataInputStream in = new DataInputStream(new FileInputStream(file));
            for(int i=0; i<normScaleFactors.length; i++)
                normScaleFactors[i] = in.readDouble();
                        
        } catch (FileNotFoundException ex) {
            Exceptions.printStackTrace(ex);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
        
        return normScaleFactors;        
    }
    
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        // initialize animation panel
        animationPanel1.init();
        
        // create mind wave controller using selected neural network
        controller = new MindWaveController(selectedNeuralNetwork);
        
        // read and set scale factors used when data set was created (this should be done better)
        double[] normScaleFactors = readNormalizationScaleFactorsfromFile(normScaleField.getText().trim());
        MindWaveManager.getInstance().setScaleFactors(normScaleFactors);
        
        // listen to the packets coming from mind wave thread
        MindWaveManager.getInstance().getMindWaveThread().addListener(this);                      
    }//GEN-LAST:event_startButtonActionPerformed

    // manually move image left
    private void leftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftButtonActionPerformed
        animationPanel1.left();
    }//GEN-LAST:event_leftButtonActionPerformed

    // manually move image right
    private void rightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightButtonActionPerformed
        animationPanel1.right();
    }//GEN-LAST:event_rightButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.neuroph.neurosky.demo.AnimationPanel animationPanel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton leftButton;
    private javax.swing.JTextField normScaleField;
    private javax.swing.JButton rightButton;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        lookupResults = Utilities.actionsGlobalContext().lookupResult(NeuralNetwork.class);
        lookupResults.addLookupListener(this);
        resultChanged(new LookupEvent(lookupResults));
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void handleMindWaveEvent(MindWaveEvent event) {
                
        // get mind wave sample
        MindWaveSample mindWaveSample = event.getPacket();
        
        // recognize the action using neural network
        String action = controller.getAction(mindWaveSample);
        // do left or right
      
        switch (action) {
            case "Left":
                    animationPanel1.left();
                break;
            case "Right":
                    animationPanel1.right();
                break;
        }
        
    }

    
    Lookup.Result<NeuralNetwork> lookupResults;
    
    @Override
    public void resultChanged(LookupEvent le) {
        Collection c = lookupResults.allInstances();
        if (!c.isEmpty()) {
            selectedNeuralNetwork = (NeuralNetwork) c.iterator().next();
        }
    }
    
    
}
