/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.neuroph.imagepreprocessing.wizard;

import imagepreprocessing.manager.ImageFilterManager;
import java.awt.Color;
import java.awt.Component;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JPanel;
import javax.swing.JSpinner;

public final class ImageDataSetVisualPanel2 extends JPanel {

    /**
     * Creates new form ImageDataSetVisualPanel2
     */
    public ImageDataSetVisualPanel2() {
        initComponents();
       // showManipulationPanels(false,false,false);

    }

    @Override
    public String getName() {
        return "Choose manipulations";
    }

    public JSpinner getjSpinnerRotationFrom() {
        return jSpinnerRotationFrom;
    }

    public JSpinner getjSpinnerRotationStep() {
        return jSpinnerRotationStep;
    }

    public JSpinner getjSpinnerRotationTo() {
        return jSpinnerRotationTo;
    }

    public JSpinner getjSpinnerScalingFrom() {
        return jSpinnerScalingFrom;
    }

    public JSpinner getjSpinnerScalingStep() {
        return jSpinnerScalingStep;
    }

    public JSpinner getjSpinnerScalingTo() {
        return jSpinnerScalingTo;
    }

    public JSpinner getjSpinnerTranslationFrom() {
        return jSpinnerTranslationFrom;
    }

    public JSpinner getjSpinnerTranslationStep() {
        return jSpinnerTranslationStep;
    }

    public JSpinner getjSpinnerTranslationTo() {
        return jSpinnerTranslationTo;
    }

    public JCheckBox getjCheckBoxRotation() {
        return jCheckBoxRotation;
    }

    public JCheckBox getjCheckBoxScaling() {
        return jCheckBoxScaling;
    }

    public JCheckBox getjCheckBoxTranslation() {
        return jCheckBoxTranslation;
    }

    public JPanel getRotationBackgroundPanel1() {
        return rotationBackgroundPanel1;
    }

    public JPanel getTranslationBackgroundPanel() {
        return translationBackgroundPanel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundColorChooser = new javax.swing.JColorChooser();
        jCheckBoxScaling = new javax.swing.JCheckBox();
        jPanelScaling = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSpinnerScalingTo = new javax.swing.JSpinner();
        jSpinnerScalingFrom = new javax.swing.JSpinner();
        jSpinnerScalingStep = new javax.swing.JSpinner();
        jCheckBoxRotation = new javax.swing.JCheckBox();
        jPanelRotation = new javax.swing.JPanel();
        jSpinnerRotationStep = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jSpinnerRotationFrom = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jSpinnerRotationTo = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        rotationBackgroundPanel1 = new javax.swing.JPanel();
        translationbackgroundLabel2 = new javax.swing.JLabel();
        jCheckBoxTranslation = new javax.swing.JCheckBox();
        jPanelTranslation = new javax.swing.JPanel();
        jSpinnerTranslationFrom = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        jSpinnerTranslationTo = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        jSpinnerTranslationStep = new javax.swing.JSpinner();
        jLabel12 = new javax.swing.JLabel();
        translationbackgroundLabel1 = new javax.swing.JLabel();
        translationBackgroundPanel = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(627, 502));

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxScaling, org.openide.util.NbBundle.getMessage(ImageDataSetVisualPanel2.class, "ImageDataSetVisualPanel2.jCheckBoxScaling.text")); // NOI18N
        jCheckBoxScaling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxScalingActionPerformed(evt);
            }
        });

        jPanelScaling.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ImageDataSetVisualPanel2.class, "ImageDataSetVisualPanel2.jPanelScaling.border.title"))); // NOI18N
        jPanelScaling.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ImageDataSetVisualPanel2.class, "ImageDataSetVisualPanel2.jLabel2.text")); // NOI18N
        jLabel2.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(ImageDataSetVisualPanel2.class, "ImageDataSetVisualPanel2.jLabel4.text")); // NOI18N
        jLabel4.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(ImageDataSetVisualPanel2.class, "ImageDataSetVisualPanel2.jLabel3.text")); // NOI18N
        jLabel3.setEnabled(false);

        jSpinnerScalingTo.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(0.1d)));
        jSpinnerScalingTo.setEnabled(false);

        jSpinnerScalingFrom.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(0.1d)));
        jSpinnerScalingFrom.setEnabled(false);

        jSpinnerScalingStep.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.1d), null, null, Double.valueOf(0.1d)));
        jSpinnerScalingStep.setEnabled(false);

        javax.swing.GroupLayout jPanelScalingLayout = new javax.swing.GroupLayout(jPanelScaling);
        jPanelScaling.setLayout(jPanelScalingLayout);
        jPanelScalingLayout.setHorizontalGroup(
            jPanelScalingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelScalingLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinnerScalingFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinnerScalingTo, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinnerScalingStep, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanelScalingLayout.setVerticalGroup(
            jPanelScalingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelScalingLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanelScalingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jSpinnerScalingFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jSpinnerScalingTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jSpinnerScalingStep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxRotation, org.openide.util.NbBundle.getMessage(ImageDataSetVisualPanel2.class, "ImageDataSetVisualPanel2.jCheckBoxRotation.text")); // NOI18N
        jCheckBoxRotation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxRotationActionPerformed(evt);
            }
        });

        jPanelRotation.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ImageDataSetVisualPanel2.class, "ImageDataSetVisualPanel2.jPanelRotation.border.title"))); // NOI18N
        jPanelRotation.setEnabled(false);

        jSpinnerRotationStep.setModel(new javax.swing.SpinnerNumberModel());
        jSpinnerRotationStep.setEditor(new javax.swing.JSpinner.NumberEditor(jSpinnerRotationStep, "0°"));
        jSpinnerRotationStep.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(ImageDataSetVisualPanel2.class, "ImageDataSetVisualPanel2.jLabel6.text")); // NOI18N
        jLabel6.setEnabled(false);

        jSpinnerRotationFrom.setModel(new javax.swing.SpinnerNumberModel());
        jSpinnerRotationFrom.setEditor(new javax.swing.JSpinner.NumberEditor(jSpinnerRotationFrom, "0°"));
        jSpinnerRotationFrom.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(ImageDataSetVisualPanel2.class, "ImageDataSetVisualPanel2.jLabel7.text")); // NOI18N
        jLabel7.setEnabled(false);

        jSpinnerRotationTo.setModel(new javax.swing.SpinnerNumberModel());
        jSpinnerRotationTo.setEditor(new javax.swing.JSpinner.NumberEditor(jSpinnerRotationTo, "0°"));
        jSpinnerRotationTo.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(ImageDataSetVisualPanel2.class, "ImageDataSetVisualPanel2.jLabel8.text")); // NOI18N
        jLabel8.setEnabled(false);

        rotationBackgroundPanel1.setBackground(new java.awt.Color(0, 0, 0));
        rotationBackgroundPanel1.setEnabled(false);
        rotationBackgroundPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rotationBackgroundPanel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout rotationBackgroundPanel1Layout = new javax.swing.GroupLayout(rotationBackgroundPanel1);
        rotationBackgroundPanel1.setLayout(rotationBackgroundPanel1Layout);
        rotationBackgroundPanel1Layout.setHorizontalGroup(
            rotationBackgroundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 32, Short.MAX_VALUE)
        );
        rotationBackgroundPanel1Layout.setVerticalGroup(
            rotationBackgroundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 29, Short.MAX_VALUE)
        );

        translationbackgroundLabel2.setBackground(new java.awt.Color(0, 0, 0));
        translationbackgroundLabel2.setLabelFor(backgroundColorChooser);
        org.openide.awt.Mnemonics.setLocalizedText(translationbackgroundLabel2, org.openide.util.NbBundle.getMessage(ImageDataSetVisualPanel2.class, "ImageDataSetVisualPanel2.translationbackgroundLabel2.text")); // NOI18N
        translationbackgroundLabel2.setEnabled(false);

        javax.swing.GroupLayout jPanelRotationLayout = new javax.swing.GroupLayout(jPanelRotation);
        jPanelRotation.setLayout(jPanelRotationLayout);
        jPanelRotationLayout.setHorizontalGroup(
            jPanelRotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRotationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelRotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelRotationLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinnerRotationFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinnerRotationTo, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinnerRotationStep, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelRotationLayout.createSequentialGroup()
                        .addComponent(translationbackgroundLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rotationBackgroundPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelRotationLayout.setVerticalGroup(
            jPanelRotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRotationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelRotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelRotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jSpinnerRotationFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jSpinnerRotationTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)
                        .addComponent(jLabel8)
                        .addComponent(jSpinnerRotationStep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanelRotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rotationBackgroundPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(translationbackgroundLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxTranslation, org.openide.util.NbBundle.getMessage(ImageDataSetVisualPanel2.class, "ImageDataSetVisualPanel2.jCheckBoxTranslation.text")); // NOI18N
        jCheckBoxTranslation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxTranslationActionPerformed(evt);
            }
        });

        jPanelTranslation.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ImageDataSetVisualPanel2.class, "ImageDataSetVisualPanel2.jPanelTranslation.border.title"))); // NOI18N
        jPanelTranslation.setEnabled(false);

        jSpinnerTranslationFrom.setModel(new javax.swing.SpinnerNumberModel());
        jSpinnerTranslationFrom.setEditor(new javax.swing.JSpinner.NumberEditor(jSpinnerTranslationFrom, "0 px"));
        jSpinnerTranslationFrom.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(ImageDataSetVisualPanel2.class, "ImageDataSetVisualPanel2.jLabel9.text")); // NOI18N
        jLabel9.setEnabled(false);

        jSpinnerTranslationTo.setModel(new javax.swing.SpinnerNumberModel());
        jSpinnerTranslationTo.setEditor(new javax.swing.JSpinner.NumberEditor(jSpinnerTranslationTo, "0 px"));
        jSpinnerTranslationTo.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel11, org.openide.util.NbBundle.getMessage(ImageDataSetVisualPanel2.class, "ImageDataSetVisualPanel2.jLabel11.text")); // NOI18N
        jLabel11.setEnabled(false);

        jSpinnerTranslationStep.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        jSpinnerTranslationStep.setEditor(new javax.swing.JSpinner.NumberEditor(jSpinnerTranslationStep, "0 px"));
        jSpinnerTranslationStep.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(ImageDataSetVisualPanel2.class, "ImageDataSetVisualPanel2.jLabel12.text")); // NOI18N
        jLabel12.setEnabled(false);

        translationbackgroundLabel1.setBackground(new java.awt.Color(0, 0, 0));
        translationbackgroundLabel1.setLabelFor(backgroundColorChooser);
        org.openide.awt.Mnemonics.setLocalizedText(translationbackgroundLabel1, org.openide.util.NbBundle.getMessage(ImageDataSetVisualPanel2.class, "ImageDataSetVisualPanel2.translationbackgroundLabel1.text")); // NOI18N
        translationbackgroundLabel1.setEnabled(false);

        translationBackgroundPanel.setBackground(new java.awt.Color(0, 0, 0));
        translationBackgroundPanel.setEnabled(false);
        translationBackgroundPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                translationBackgroundPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout translationBackgroundPanelLayout = new javax.swing.GroupLayout(translationBackgroundPanel);
        translationBackgroundPanel.setLayout(translationBackgroundPanelLayout);
        translationBackgroundPanelLayout.setHorizontalGroup(
            translationBackgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 32, Short.MAX_VALUE)
        );
        translationBackgroundPanelLayout.setVerticalGroup(
            translationBackgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanelTranslationLayout = new javax.swing.GroupLayout(jPanelTranslation);
        jPanelTranslation.setLayout(jPanelTranslationLayout);
        jPanelTranslationLayout.setHorizontalGroup(
            jPanelTranslationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTranslationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTranslationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelTranslationLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinnerTranslationFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinnerTranslationTo, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinnerTranslationStep, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))
                    .addGroup(jPanelTranslationLayout.createSequentialGroup()
                        .addComponent(translationbackgroundLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(translationBackgroundPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanelTranslationLayout.setVerticalGroup(
            jPanelTranslationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTranslationLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanelTranslationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jSpinnerTranslationFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(jSpinnerTranslationTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jSpinnerTranslationStep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelTranslationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(translationbackgroundLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(translationBackgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelTranslation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelScaling, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelRotation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxTranslation)
                    .addComponent(jCheckBoxScaling)
                    .addComponent(jCheckBoxRotation))
                .addContainerGap(267, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jCheckBoxScaling)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelScaling, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxRotation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelRotation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxTranslation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelTranslation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxTranslationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxTranslationActionPerformed
        if (jCheckBoxTranslation.isSelected()) {
            jPanelTranslation.setEnabled(true);
            translationBackgroundPanel.setEnabled(true);
            for (Component com : jPanelTranslation.getComponents()) {
                com.setEnabled(true);
            }
        } else {
            jPanelTranslation.setEnabled(false);
             translationBackgroundPanel.setEnabled(false);
            for (Component com : jPanelTranslation.getComponents()) {
                com.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jCheckBoxTranslationActionPerformed

    private void jCheckBoxScalingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxScalingActionPerformed
        if (jCheckBoxScaling.isSelected()) {
            jPanelScaling.setEnabled(true);
            for (Component com : jPanelScaling.getComponents()) {
                com.setEnabled(true);
            }
        } else {
            jPanelScaling.setEnabled(false);
            for (Component com : jPanelScaling.getComponents()) {
                com.setEnabled(false);
            }
        }

    }//GEN-LAST:event_jCheckBoxScalingActionPerformed

    private void jCheckBoxRotationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxRotationActionPerformed
        if (jCheckBoxRotation.isSelected()) {
            jPanelRotation.setEnabled(true);
            rotationBackgroundPanel1.setEnabled(true);
            for (Component com : jPanelRotation.getComponents()) {
                com.setEnabled(true);
            }

        } else {
            jPanelRotation.setEnabled(false);
            rotationBackgroundPanel1.setEnabled(false);
            for (Component com : jPanelRotation.getComponents()) {
                com.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jCheckBoxRotationActionPerformed

    private void translationBackgroundPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_translationBackgroundPanelMouseClicked
        
        if (translationBackgroundPanel.isEnabled()) {
            Color c = JColorChooser.showDialog(null, "Choose a Color", translationBackgroundPanel.getBackground());
            translationBackgroundPanel.setBackground(c);
        }

    }//GEN-LAST:event_translationBackgroundPanelMouseClicked

    private void rotationBackgroundPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rotationBackgroundPanel1MouseClicked
        if (rotationBackgroundPanel1.isEnabled()) {
            Color c = JColorChooser.showDialog(null, "Choose a Color", rotationBackgroundPanel1.getBackground());
            rotationBackgroundPanel1.setBackground(c);
        }
    }//GEN-LAST:event_rotationBackgroundPanel1MouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JColorChooser backgroundColorChooser;
    private javax.swing.JCheckBox jCheckBoxRotation;
    private javax.swing.JCheckBox jCheckBoxScaling;
    private javax.swing.JCheckBox jCheckBoxTranslation;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanelRotation;
    private javax.swing.JPanel jPanelScaling;
    private javax.swing.JPanel jPanelTranslation;
    private javax.swing.JSpinner jSpinnerRotationFrom;
    private javax.swing.JSpinner jSpinnerRotationStep;
    private javax.swing.JSpinner jSpinnerRotationTo;
    private javax.swing.JSpinner jSpinnerScalingFrom;
    private javax.swing.JSpinner jSpinnerScalingStep;
    private javax.swing.JSpinner jSpinnerScalingTo;
    private javax.swing.JSpinner jSpinnerTranslationFrom;
    private javax.swing.JSpinner jSpinnerTranslationStep;
    private javax.swing.JSpinner jSpinnerTranslationTo;
    private javax.swing.JPanel rotationBackgroundPanel1;
    private javax.swing.JPanel translationBackgroundPanel;
    private javax.swing.JLabel translationbackgroundLabel1;
    private javax.swing.JLabel translationbackgroundLabel2;
    // End of variables declaration//GEN-END:variables

    private void showManipulationPanels(boolean b, boolean b0, boolean b1) {
        jPanelScaling.setVisible(b);
        jPanelRotation.setVisible(b0);
        jPanelTranslation.setVisible(b1);
    }

}
