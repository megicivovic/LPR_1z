/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.neuroph.imagepreprocessing;



import imagepreprocessing.manager.ImageFilterManager;
import imagepreprocessing.view.ImagePanel;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.netbeans.api.settings.ConvertAsProperties;
import org.neuroph.imgrec.filter.FilteredImage;
import org.neuroph.imgrec.filter.ImageFilter;
import org.neuroph.imgrec.filter.ImageFilterChain;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.filesystems.FileObject;
import org.openide.loaders.DataObject;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays image preprocessing window.
 * Image preprocessing window allows user to choose filters and apply them to 
 * chosen image.
 * Created filter chain can be saved in order to be used in when creating image data set.
 */
@ConvertAsProperties(
        dtd = "-//org.neuroph.imagepreprocessing//PreprocessingWindow//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "PreprocessingWindowTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.neuroph.imagepreprocessing.PreprocessingWindowTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_PreprocessingWindowAction",
        preferredID = "PreprocessingWindowTopComponent"
)
@Messages({
    "CTL_PreprocessingWindowAction=PreprocessingWindow",
    "CTL_PreprocessingWindowTopComponent=Image Preprocessing Tool",
    "HINT_PreprocessingWindowTopComponent=This is a Preprocessing window"
})
public final class PreprocessingWindowTopComponent extends TopComponent {

    private BufferedImage image;
    List<FilteredImage> filteredImages;
    File filterChainDir = null;
    private FileObject rootFileObject;
    private DataObject dataObject;
    private Node rootNode;
    private ArrayList<Node> nodes = new ArrayList<Node>();
    ExplorerManager mgr = new ExplorerManager();

    public PreprocessingWindowTopComponent() {
        initComponents();
        setName(Bundle.CTL_PreprocessingWindowTopComponent());
        setToolTipText(Bundle.HINT_PreprocessingWindowTopComponent());
        fillComboBox();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jFileChooserFilterChain = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        imageTextField = new javax.swing.JTextField();
        openImageButton = new javax.swing.JButton();
        processButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        originalImageLabel = new javax.swing.JLabel();
        jButtonSaveChain = new javax.swing.JButton();
        jButtonLoadChain = new javax.swing.JButton();
        imagePreprocessingPanel1 = new imagepreprocessing.view.ImagePreprocessingPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        imagePanel = new javax.swing.JPanel();

        jFileChooserFilterChain.setCurrentDirectory(new java.io.File("C:\\Users\\Sanja\\Documents\\NetBeansProjects\\NeurophStudioSOK\\ImagePreprocessing\\serialized"));
        jFileChooserFilterChain.setDialogTitle(org.openide.util.NbBundle.getMessage(PreprocessingWindowTopComponent.class, "PreprocessingWindowTopComponent.jFileChooserFilterChain.dialogTitle")); // NOI18N

        setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new java.awt.Font("Verdana", 3, 18)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PreprocessingWindowTopComponent.class, "PreprocessingWindowTopComponent.jLabel1.text")); // NOI18N
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        imageTextField.setText(org.openide.util.NbBundle.getMessage(PreprocessingWindowTopComponent.class, "PreprocessingWindowTopComponent.imageTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(openImageButton, org.openide.util.NbBundle.getMessage(PreprocessingWindowTopComponent.class, "PreprocessingWindowTopComponent.openImageButton.text")); // NOI18N
        openImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openImageButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(processButton, org.openide.util.NbBundle.getMessage(PreprocessingWindowTopComponent.class, "PreprocessingWindowTopComponent.processButton.text")); // NOI18N
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });

        originalImageLabel.setAutoscrolls(true);
        jScrollPane1.setViewportView(originalImageLabel);

        org.openide.awt.Mnemonics.setLocalizedText(jButtonSaveChain, org.openide.util.NbBundle.getMessage(PreprocessingWindowTopComponent.class, "PreprocessingWindowTopComponent.jButtonSaveChain.text")); // NOI18N
        jButtonSaveChain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveChainActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButtonLoadChain, org.openide.util.NbBundle.getMessage(PreprocessingWindowTopComponent.class, "PreprocessingWindowTopComponent.jButtonLoadChain.text")); // NOI18N
        jButtonLoadChain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadChainActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(imageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(openImageButton)
                                .addGap(18, 18, 18)
                                .addComponent(processButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1))
                        .addGap(18, 18, 18)
                        .addComponent(imagePreprocessingPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonSaveChain, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonLoadChain, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(292, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonLoadChain)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSaveChain)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(imageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(openImageButton)
                                    .addComponent(processButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                                .addContainerGap())
                            .addComponent(imagePreprocessingPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );

        imagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(PreprocessingWindowTopComponent.class, "PreprocessingWindowTopComponent.imagePanel.border.title"))); // NOI18N
        imagePanel.setAutoscrolls(true);
        jScrollPane2.setViewportView(imagePanel);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(25, 25, 25))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Apply filter chain to image
     * @param evt 
     */
    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed

        //remove all previous images from panel
        imagePanel.removeAll();

        ImageFilterChain chain;
        chain = imagePreprocessingPanel1.getImageFilterChain();
        filteredImages = chain.processImageTest(image);
        //show all steps in filtering image
        for (FilteredImage filteretImage : filteredImages) {
            imagePanel.add(new ImagePanel(filteretImage.getImage(),
                    filteretImage.getFilterName()));

        }

        //refresh form
        imagePanel.updateUI();
        imagePanel.repaint();


    }//GEN-LAST:event_processButtonActionPerformed
    /**
     * Choose image for preprocessing
     *
     * @param evt
     */
    private void openImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openImageButtonActionPerformed
        //open file chooser
        int returnVal = jFileChooser1.showOpenDialog(this);
        File file = null;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = jFileChooser1.getSelectedFile();
            imageTextField.setText(file.getName());

            try {
                //read image from specified file
                image = ImageIO.read(file);
                //show original image
                originalImageLabel.setIcon(new ImageIcon(image));

            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_openImageButtonActionPerformed
    /**
     * Save filter chain
     *
     * @param evt
     */
    private void jButtonSaveChainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveChainActionPerformed

        String chainName = JOptionPane.showInputDialog("Choose file name");

        if (chainName != null) {
            //chain name not entered
            if (chainName.isEmpty()) {
                chainName = "Chain";

            }
            try {
                //create file to save filter chain
                File f = new File("ImagePreprocessing/serialized/"
                        + chainName + ".ser");
                int i = 1;
                //get unique name
                while (true) {
                    if (f.exists() && !f.isDirectory()) {
                        String newName = chainName + "_" + i;
                        f = new File("ImagePreprocessing/serialized/"
                                + newName + ".ser");
                        i++;
                    } else {
                        break;
                    }
                }

                FileOutputStream fileOut
                        = new FileOutputStream(f);

                //write chain to file
                ObjectOutputStream out = new ObjectOutputStream(fileOut);
                ImageFilterChain chain = new ImageFilterChain();
                chain.setFilters((List<ImageFilter>) imagePreprocessingPanel1.getImageFilterChain().getFilters());
                chainName = f.getName().substring(0, f.getName().indexOf("."));
                chain.setChainName(chainName);
                out.writeObject(chain);

                out.close();
                fileOut.close();

                //add chain to ImageFilterManager to be shown in Image Data Set Wizard
                ImageFilterManager.getObject()
                        .addChain(chain);
                //refresh combobox
                fillComboBox();
                jComboBox1.setSelectedItem(chain);
                JOptionPane.showMessageDialog(this, "Filter chain is saved in ImagePreprocessing/serialized/"
                        + chainName + ".ser");
            } catch (Exception i) {
                JOptionPane.showMessageDialog(this, "Unable to save filter chain");
                i.printStackTrace();

            }
        }
    }//GEN-LAST:event_jButtonSaveChainActionPerformed
    /**
     * Load filter chain
     *
     * @param evt
     */
    private void jButtonLoadChainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadChainActionPerformed
        ImageFilterChain chain = null;
        int returnVal = jFileChooserFilterChain.showOpenDialog(this);
        File file = null;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = jFileChooserFilterChain.getSelectedFile();
            try {

                FileInputStream fileIn = new FileInputStream(file);
                ObjectInputStream in = new ObjectInputStream(fileIn);
                //read chain from file
                chain = (ImageFilterChain) in.readObject();
                //ImageFilterManafer is empty just add filter
                if (ImageFilterManager.getObject().getListOfFilters().isEmpty()) {
                    ImageFilterManager.getObject().addChain(chain);
                    fillComboBox();
                } else {
                    //ImageFilterManager is not empty, check if filter is already in ImageFilterManager 
                    boolean exists = false;
                    for (ImageFilterChain fc : ImageFilterManager.getObject().getListOfFilters()) {
                        if (fc.getChainName().equals(chain.getChainName())) {
                            exists = true;
                            break;
                        }
                    }
                    if (!exists) {
                        ImageFilterManager.getObject().addChain(chain);
                        fillComboBox();
                    }
                }
                in.close();
                fileIn.close();

            } catch (IOException i) {
                JOptionPane.showMessageDialog(this, "Unable to load filter chain");
                i.printStackTrace();
                return;
            } catch (ClassNotFoundException ex) {

                Exceptions.printStackTrace(ex);

            }
        }

    }//GEN-LAST:event_jButtonLoadChainActionPerformed
    /**
     * Show chosen filter chain in list
     *
     * @param evt
     */
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        ImageFilterChain ifc = (ImageFilterChain) jComboBox1.getSelectedItem();
        imagePreprocessingPanel1.getSelectedFiltersLM().clear();
        for (ImageFilter imageFilter : ifc.getFilters()) {
            imagePreprocessingPanel1.getSelectedFiltersLM().addElement(imageFilter);
        }

    }//GEN-LAST:event_jComboBox1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel imagePanel;
    private imagepreprocessing.view.ImagePreprocessingPanel imagePreprocessingPanel1;
    private javax.swing.JTextField imageTextField;
    private javax.swing.JButton jButtonLoadChain;
    private javax.swing.JButton jButtonSaveChain;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFileChooser jFileChooserFilterChain;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton openImageButton;
    private javax.swing.JLabel originalImageLabel;
    private javax.swing.JButton processButton;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void fillComboBox() {
        jComboBox1.setModel(new DefaultComboBoxModel(ImageFilterManager.getObject().getListOfFilters().toArray()));
    }

}
