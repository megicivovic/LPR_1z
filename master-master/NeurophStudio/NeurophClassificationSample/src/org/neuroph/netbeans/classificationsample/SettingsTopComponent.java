/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.neuroph.netbeans.classificationsample;

import java.util.logging.Logger;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.neuroph.netbeans.main.easyneurons.samples.mlperceptron.panels//Settings//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "SettingsTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "properties", openAtStartup = false)
@ActionID(category = "Window", id = "org.neuroph.netbeans.main.easyneurons.samples.mlperceptron.panels.SettingsTopComponent")
//@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_SettingsAction",
        preferredID = "SettingsTopComponent")
@Messages({
    "CTL_SettingsAction=Settings",
    "CTL_SettingsTopComponent=Multi Layer Perceptron Classification Sample Settings",
    "HINT_SettingsTopComponent=This is a Multi Layer Perceptron Classification Sample Settings"
})
public final class SettingsTopComponent extends TopComponent {

    private SettingsTopComponent() {
        initComponents();
        setName(Bundle.CTL_SettingsTopComponent());
        setToolTipText(Bundle.HINT_SettingsTopComponent());
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 510, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 270, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private MultiLayerPerceptronClassificationSamplePanel controllsPanel;
    
    private static SettingsTopComponent instance;
    private static final String PREFERRED_ID = "SettingsTopComponent";
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    private static synchronized SettingsTopComponent getDefault() {
        if (instance == null) {
            instance = new SettingsTopComponent();
        }
        return instance;
    }
    
    /**
     * Obtain the MultiLayerPerceptronClassificationSampleTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized SettingsTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(SettingsTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof SettingsTopComponent) {
            return (SettingsTopComponent) win;
        }
        Logger.getLogger(SettingsTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }
    
    public MultiLayerPerceptronClassificationSamplePanel getControllsPanel() {
        return controllsPanel;
    }

    public void setControllsPanel(MultiLayerPerceptronClassificationSamplePanel controllsPanel) {
        this.controllsPanel = controllsPanel;
    }
    
    public void initializePanel(MultiLayerPerceptronClassificationSampleTopComponent mlp){
        controllsPanel = new MultiLayerPerceptronClassificationSamplePanel(mlp);
        controllsPanel.setSize(getMaximumSize());//415, 454
        add(controllsPanel);
    }
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

  
}
