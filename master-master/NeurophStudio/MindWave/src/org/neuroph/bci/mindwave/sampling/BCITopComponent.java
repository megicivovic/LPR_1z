package org.neuroph.bci.mindwave.sampling;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import org.netbeans.api.settings.ConvertAsProperties;
import org.neuroph.bci.mindwave.MindWaveManager;
import org.neuroph.bci.mindwave.MindWaveTopComponent;
import org.neuroph.core.data.DataSet;
import org.neuroph.netbeans.project.CurrentProject;
import org.neuroph.netbeans.project.NeurophProject;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.neuroph.bci.mindwave//BCI//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "BCITopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "commonpalette", openAtStartup = false)
@ActionID(category = "Window", id = "org.neuroph.bci.mindwave.BCITopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_BCIAction",
        preferredID = "BCITopComponent")
@Messages({
    "CTL_BCIAction=Mental Image Sampler",
    "CTL_BCITopComponent=Mental Image Sampler",
    "HINT_BCITopComponent=This is a Mental Image Sampler window"
})
public final class BCITopComponent extends TopComponent {

    boolean isRecording = false;
    String[] mentalImages = new String[]{"Left", "Right", "Rest"};
    String[] mentalImagesIcons = new String[]{"Left.png", "Right.png", "Rest.png"};
    int counter = 0;
    MindWaveTopComponent mindWaveTC;

    private static BCITopComponent instance;
    
    public static synchronized BCITopComponent getDefault() {
        if (instance == null) {
            instance = new BCITopComponent();
        }
        return instance;
    }    
    
    public static synchronized BCITopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent("BCITopComponent" );
        if (win == null) {
            Logger.getLogger(BCITopComponent.class.getName()).warning(
                    "Cannot find " + "BCITopComponent" + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof BCITopComponent) {
            return (BCITopComponent) win;
        }
        Logger.getLogger(BCITopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + "BCITopComponent"
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }          
    
    public BCITopComponent() {
        initComponents();
        setName(Bundle.CTL_BCITopComponent());
        setToolTipText(Bundle.HINT_BCITopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startStopButton = new javax.swing.JButton();
        mentalImageLabel = new javax.swing.JLabel();
        nextButton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        saveSamplesButton = new javax.swing.JButton();
        fileNameField = new javax.swing.JTextField();
        createDataSetButton = new javax.swing.JButton();
        clearAllButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(startStopButton, org.openide.util.NbBundle.getMessage(BCITopComponent.class, "BCITopComponent.startStopButton.text")); // NOI18N
        startStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStopButtonActionPerformed(evt);
            }
        });

        mentalImageLabel.setFont(new java.awt.Font("Ubuntu", 1, 36)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mentalImageLabel, org.openide.util.NbBundle.getMessage(BCITopComponent.class, "BCITopComponent.mentalImageLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(nextButton, org.openide.util.NbBundle.getMessage(BCITopComponent.class, "BCITopComponent.nextButton.text")); // NOI18N
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(statusLabel, org.openide.util.NbBundle.getMessage(BCITopComponent.class, "BCITopComponent.statusLabel.text")); // NOI18N

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText(org.openide.util.NbBundle.getMessage(BCITopComponent.class, "BCITopComponent.jTextArea1.text")); // NOI18N
        jScrollPane1.setViewportView(jTextArea1);

        org.openide.awt.Mnemonics.setLocalizedText(saveSamplesButton, org.openide.util.NbBundle.getMessage(BCITopComponent.class, "BCITopComponent.saveSamplesButton.text")); // NOI18N
        saveSamplesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSamplesButtonActionPerformed(evt);
            }
        });

        fileNameField.setText(org.openide.util.NbBundle.getMessage(BCITopComponent.class, "BCITopComponent.fileNameField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(createDataSetButton, org.openide.util.NbBundle.getMessage(BCITopComponent.class, "BCITopComponent.createDataSetButton.text")); // NOI18N
        createDataSetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createDataSetButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(clearAllButton, org.openide.util.NbBundle.getMessage(BCITopComponent.class, "BCITopComponent.clearAllButton.text")); // NOI18N
        clearAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(startStopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(fileNameField)
                            .addComponent(clearAllButton))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(141, 141, 141)
                                .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(createDataSetButton)
                                    .addComponent(saveSamplesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(mentalImageLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(mentalImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startStopButton)
                            .addComponent(nextButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(saveSamplesButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createDataSetButton)
                    .addComponent(clearAllButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void startStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStopButtonActionPerformed
        //mindWaveTC = (MindWaveTopComponent) WindowManager.getDefault().findTopComponent("MindWaveTopComponent");
        mindWaveTC = MindWaveTopComponent.findInstance();
        if (isRecording == false) {
            isRecording = true;
            statusLabel.setText("Recording Sample");
            startStopButton.setText("Stop");
            nextButton.setEnabled(false);
            mindWaveTC.startRecordingSample(mentalImages[counter]);

        } else {
            isRecording = false;
            statusLabel.setText("");
            startStopButton.setText("Start");
            nextButton.setEnabled(true);
            mindWaveTC.stopRecordingSample();
        }
    }//GEN-LAST:event_startStopButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        counter++;
        if (counter == mentalImages.length) {
            counter = 0;
        }

        //mentalImageLabel.setText(mentalImages[counter]);
        mentalImageLabel.setIcon(new ImageIcon(BCITopComponent.class.getResource(mentalImagesIcons[counter])));
        
    }//GEN-LAST:event_nextButtonActionPerformed

    private void saveSamplesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSamplesButtonActionPerformed
        mindWaveTC = (MindWaveTopComponent) WindowManager.getDefault().findTopComponent("MindWaveTopComponent");
        List<MentalImageSample> recordedMentalImages = mindWaveTC.getMentalImages();
        // put them all in csv file 

        try {
            FileWriter fileWriter = new FileWriter(fileNameField.getText().trim());
            BufferedWriter buffWritter = new BufferedWriter(fileWriter);
            // buffWritter.write("attention, meditation, delta, theta, lowAlpha, highAlpha, lowBeta, highBeta, lowGamma, highGamma");

            for (MentalImageSample mentalImage : recordedMentalImages) {
                buffWritter.write(mentalImage.getAsCsv() + System.lineSeparator());
            }
            buffWritter.flush();
            buffWritter.close();

        } catch (IOException e1) {
            e1.printStackTrace();
        }


    }//GEN-LAST:event_saveSamplesButtonActionPerformed

    private void createDataSetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createDataSetButtonActionPerformed
 //       NeurophProject project = Utilities.actionsGlobalContext().lookup(NeurophProject.class);
        
       String csvFilename = fileNameField.getText().trim();
       // remove timestamp (first col) from file and convert names to classes
       File mindImageCsvFile = new File(csvFilename);
       String line;
        try {
            BufferedReader br = new BufferedReader(new FileReader(mindImageCsvFile));
            BufferedWriter bw = new BufferedWriter(new FileWriter("preprocessed"+csvFilename));
                    
            while( (line = br.readLine())!=null )  {
             if (line.isEmpty()) continue;
             String preprocessedLine = fixRowString(line);
                          
              bw.write(preprocessedLine.trim()+System.lineSeparator());
            }
            bw.flush();
            bw.close();
            br.close();
            
        } catch (FileNotFoundException ex) {
            Exceptions.printStackTrace(ex);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
              
       // create DataSet instance
       DataSet dataSet = DataSet.createFromFile("preprocessed"+csvFilename, 10, 3, ",", false);
      
       // normalize DataSet
       DecimalScaleNormalizer normalizer = new DecimalScaleNormalizer();
        normalizer.normalize(dataSet);
        double[] inputScale = normalizer.getInputScaleFactors(); // send this somehow to controller
        MindWaveManager.getInstance().setScaleFactors(inputScale);
        writeNormalizationScaleFactorsToFile(inputScale, csvFilename+".norm");
        // and save this scale to file here so it can be reused again
        
        //!!! get normaliation scale here somhow here - implement max normalizaton method here
        
       // save dataset to project folder
        //dataSet.save(csvFilename.substring(0, csvFilename.lastIndexOf(".") ) +".dset");
        String dataSetName = csvFilename.substring(0, csvFilename.lastIndexOf(".") );
        dataSet.setLabel(dataSetName);
        dataSet.save(CurrentProject.getInstance().getCurrentProject().getProjectDirectory().getPath() +"/"+NeurophProject.TRAINING_SETS_DIR+ "/"+dataSetName +".tset" );
                      
    }//GEN-LAST:event_createDataSetButtonActionPerformed

    private void clearAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllButtonActionPerformed
        // MindWaveTopComponent.getDefault().getMentalImages().clear();
    }//GEN-LAST:event_clearAllButtonActionPerformed

    private void writeNormalizationScaleFactorsToFile(double[] scaleFactors, String fileName) {
        
        DataOutputStream out = null;
        try {
            File file = new File(fileName);
            out = new DataOutputStream(new FileOutputStream(file));
            for(int i=0; i<scaleFactors.length; i++) {
                out.writeDouble(scaleFactors[i]);
            }
            
        } catch (FileNotFoundException ex) {
            Exceptions.printStackTrace(ex);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        } finally {
            try {
                out.close();
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }                
    }
    
    private String fixRowString(String line) {
        String retline = line.substring(line.indexOf(",")+1); // cutout timestamp
        
        // cutout everything from last coma 
        int lastComaIndex = retline.lastIndexOf(",");
        String clazz = retline.substring(lastComaIndex+1).trim();
        // find last coma
        retline=retline.substring(0, lastComaIndex);
                              
        // and replace it with binary vector
        switch(clazz) {
            case "Left":
                    retline+=", 1, 0, 0";
                break;
            case "Right":
                    retline+=", 0, 1, 0";
                break; 
            case "Rest":
                    retline+=", 0, 0, 1";
                break;                
        }
        
        return retline;
        
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearAllButton;
    private javax.swing.JButton createDataSetButton;
    private javax.swing.JTextField fileNameField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel mentalImageLabel;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton saveSamplesButton;
    private javax.swing.JButton startStopButton;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
