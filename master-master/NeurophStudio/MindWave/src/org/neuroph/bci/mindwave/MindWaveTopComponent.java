package org.neuroph.bci.mindwave;

import org.neuroph.bci.mindwave.settings.SettingsDialog;
import org.neuroph.bci.mindwave.settings.ScaleFactors;
import org.neuroph.bci.mindwave.sampling.MentalImageSample;
import com.ericblue.mindstream.client.ThinkGearSocketClient;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import com.sun.tools.visualvm.charts.ChartFactory;
import com.sun.tools.visualvm.charts.SimpleXYChartDescriptor;
import com.sun.tools.visualvm.charts.SimpleXYChartSupport;
import java.awt.BorderLayout;
import java.awt.Color;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import org.json.JSONException;
import org.neuroph.bci.mindwave.event.MindWaveEvent;
import org.neuroph.bci.mindwave.event.MindWaveEventListener;
import org.neuroph.core.events.LearningEvent;
import org.neuroph.core.events.LearningEventListener;
import org.openide.util.Exceptions;
import org.openide.windows.IOProvider;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.neuroph.bci.mindwave//MindWave//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "MindWaveTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.neuroph.bci.mindwave.MindWaveTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_MindWaveAction", // #CTL_MindWaveAction
        preferredID = "MindWaveTopComponent")
@Messages({
    "CTL_MindWaveAction=MindWave",
    "CTL_MindWaveTopComponent=MindWave Window",
    "HINT_MindWaveTopComponent=This is a MindWave window"
})
public final class MindWaveTopComponent extends TopComponent {
// http://java.dzone.com/news/real-time-charts-java-desktop
    // https://blogs.oracle.com/geertjan/entry/youtube_displaying_realtime_data_on
    private static final int VALUES_LIMIT = 150;
    private static final int ITEMS_COUNT = 11;
    private SimpleXYChartSupport mindWaveChart;
    private SimpleXYChartSupport recordingChart;
    private MindWaveThread mindWaveThread;
    private boolean stopThread;
    private PrintWriter out;
    private StringBuilder log;
    private boolean isConnected;
    private volatile boolean isRecording;
    private String mentalImageName;
    private int sampleCount=0;
    private List<MentalImageSample> mentalImages;
    private List<MindWaveSample> recordingBuffer;
    private ThinkGearSocketClient thinkGearSocket = new ThinkGearSocketClient();
    
    private static MindWaveTopComponent instance;
    
    public static synchronized MindWaveTopComponent getDefault() {
        if (instance == null) {
            instance = new MindWaveTopComponent();
        }
        return instance;
    }    
    
    public static synchronized MindWaveTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent("MindWaveTopComponent" );
        if (win == null) {
            Logger.getLogger(MindWaveTopComponent.class.getName()).warning(
                    "Cannot find " + "MindWaveTopComponent" + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof MindWaveTopComponent) {
            return (MindWaveTopComponent) win;
        }
        Logger.getLogger(MindWaveTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + "MindWaveTopComponent"
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }    
    
    
    public MindWaveTopComponent() {
        initComponents();
        setName(Bundle.CTL_MindWaveTopComponent());
        setToolTipText(Bundle.HINT_MindWaveTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        connStatusLabel = new javax.swing.JLabel();
        connectButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        writeToFileCheckBox = new javax.swing.JCheckBox();
        logFileNameField = new javax.swing.JTextField();
        settingsButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(MindWaveTopComponent.class, "MindWaveTopComponent.jLabel1.text")); // NOI18N
        buttonPanel.add(jLabel1);

        connStatusLabel.setForeground(new java.awt.Color(230, 0, 0));
        org.openide.awt.Mnemonics.setLocalizedText(connStatusLabel, org.openide.util.NbBundle.getMessage(MindWaveTopComponent.class, "MindWaveTopComponent.connStatusLabel.text")); // NOI18N
        buttonPanel.add(connStatusLabel);

        org.openide.awt.Mnemonics.setLocalizedText(connectButton, org.openide.util.NbBundle.getMessage(MindWaveTopComponent.class, "MindWaveTopComponent.connectButton.text")); // NOI18N
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(connectButton);

        org.openide.awt.Mnemonics.setLocalizedText(startButton, org.openide.util.NbBundle.getMessage(MindWaveTopComponent.class, "MindWaveTopComponent.startButton.text")); // NOI18N
        startButton.setEnabled(false);
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(startButton);

        org.openide.awt.Mnemonics.setLocalizedText(stopButton, org.openide.util.NbBundle.getMessage(MindWaveTopComponent.class, "MindWaveTopComponent.stopButton.text")); // NOI18N
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(stopButton);

        org.openide.awt.Mnemonics.setLocalizedText(writeToFileCheckBox, org.openide.util.NbBundle.getMessage(MindWaveTopComponent.class, "MindWaveTopComponent.writeToFileCheckBox.text")); // NOI18N
        writeToFileCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                writeToFileCheckBoxStateChanged(evt);
            }
        });
        buttonPanel.add(writeToFileCheckBox);

        logFileNameField.setColumns(15);
        logFileNameField.setText(org.openide.util.NbBundle.getMessage(MindWaveTopComponent.class, "MindWaveTopComponent.logFileNameField.text")); // NOI18N
        logFileNameField.setEnabled(false);
        buttonPanel.add(logFileNameField);

        org.openide.awt.Mnemonics.setLocalizedText(settingsButton, org.openide.util.NbBundle.getMessage(MindWaveTopComponent.class, "MindWaveTopComponent.settingsButton.text")); // NOI18N
        settingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(settingsButton);

        org.openide.awt.Mnemonics.setLocalizedText(clearButton, org.openide.util.NbBundle.getMessage(MindWaveTopComponent.class, "MindWaveTopComponent.clearButton.text")); // NOI18N
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(clearButton);

        add(buttonPanel, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    public List<MentalImageSample> getMentalImages() {
        return mentalImages;
    }

    
    
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
       // check if it is allready running
       
       String logFile = logFileNameField.getText().trim();
        
       mindWaveThread = new MindWaveThread(mindWaveChart, writeToFileCheckBox.isSelected(), logFile);

       MindWaveManager.getInstance().setMindWaveThread(mindWaveThread);
       
       mentalImages = new ArrayList();
       stopThread = false;       
       mindWaveThread.start();
       
       startButton.setEnabled(false);
       writeToFileCheckBox.setEnabled(false);
       logFileNameField.setEnabled(false);
       stopButton.setEnabled(true);
       
    }//GEN-LAST:event_startButtonActionPerformed

    public boolean isStoped() {
        return stopThread;
    }
    
    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        stopThread =true;
        mindWaveThread.close();
        startButton.setEnabled(true);
        writeToFileCheckBox.setEnabled(true);
        logFileNameField.setEnabled(true);
    }//GEN-LAST:event_stopButtonActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        try {
            if (!thinkGearSocket.isConnected()) {
                thinkGearSocket.connect();
                isConnected = true;
                connStatusLabel.setText("Connected");
                connStatusLabel.setForeground(new Color(0, 180, 0));
                startButton.setEnabled(true);
            } else {
                connStatusLabel.setText("Disconnected");
                connStatusLabel.setForeground(new Color(230, 0, 0));                
                isConnected = true;
                
                startButton.setEnabled(false);
                stopButton.setEnabled(false);
            }
        } catch (java.net.ConnectException cex) {
            JOptionPane.showMessageDialog(null, "Connect failed! Check if ThinkGear Connector is running and try again");
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        } 
    }//GEN-LAST:event_connectButtonActionPerformed

    private void writeToFileCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_writeToFileCheckBoxStateChanged
        logFileNameField.setEnabled(writeToFileCheckBox.isSelected());
    }//GEN-LAST:event_writeToFileCheckBoxStateChanged

    private void settingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsButtonActionPerformed
        SettingsDialog dlg = new SettingsDialog(null, true);
        dlg.setVisible(true);
    }//GEN-LAST:event_settingsButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        this.remove(mindWaveChart.getChart());
        createMindWaveChart();        
        add(mindWaveChart.getChart(), BorderLayout.CENTER);
        this.validate();
    }//GEN-LAST:event_clearButtonActionPerformed

  private void createMindWaveChart() {
        SimpleXYChartDescriptor descriptor =
                SimpleXYChartDescriptor.decimal(0, 1000, 1000, 1d, true, VALUES_LIMIT);
        
        String[] names =  {"Sampling", "Attention", "Meditation", "Delta (0.1-3Hz)", "Theta(4-7Hz)", "LowAlpha(8-12)", "HighAlpha(8-12)", "LowBeta(12-30)", "HighBeta(12-30)", "LowGama(40+)", "HighGama(40+)"};
        
        for (int i = 0; i < ITEMS_COUNT; i++) {
            descriptor.addLineFillItems(names[i]);
        }

        descriptor.setChartTitle("<html><font size='+1'><b>Brain Wave Chart</b></font></html>");
        descriptor.setXAxisDescription("<html>X Axis <i>[time]</i></html>");
        descriptor.setYAxisDescription("<html>Y Axis <i>[units]</i></html>");

        mindWaveChart = ChartFactory.createSimpleXYChart(descriptor);
    }
  
  

    public synchronized void startRecordingSample(String mentalImageName) {        
        this.mentalImageName = mentalImageName;
        this.recordingBuffer = new ArrayList<>();
        isRecording=true;        
    }

    public synchronized void stopRecordingSample() {
        isRecording=false;
        MentalImageSample mentalImageSample = new MentalImageSample(mentalImageName, recordingBuffer);
        mentalImages.add(mentalImageSample);
    }
    
  
    public class MindWaveThread extends Thread {

        
        private SimpleXYChartSupport support;
        private boolean logToFile = false;
        private FileWriter fileWriter;
        private BufferedWriter buffWritter;
        protected transient javax.swing.event.EventListenerList listeners =
            new javax.swing.event.EventListenerList();
        
            // This methods allows classes to register for LearningEvents
        public void addListener(MindWaveEventListener listener) {
            listeners.add(MindWaveEventListener.class, listener);
        }

        // This methods allows classes to unregister for LearningEvents
        public void removeListener(MindWaveEventListener listener) {
            listeners.remove(MindWaveEventListener.class, listener);
        }
        
    protected void fireMindWaveEvent(MindWaveEvent evt) {
        Object[] listeners = this.listeners.getListenerList();
        // Each listener occupies two elements - the first is the listener class
        // and the second is the listener instance
        for (int i = 0; i < listeners.length; i += 2) {
            if (listeners[i] == MindWaveEventListener.class) {
                ((MindWaveEventListener) listeners[i + 1]).handleMindWaveEvent(evt);
            }
        }
    }        
        
        @Override
        public void run() {
            
            try {                                                       
                while (thinkGearSocket.isDataAvailable() && !isStoped()) {
                    String in = thinkGearSocket.getData();
                    if (in==null || in.isEmpty()) continue;
                    MindWaveSample sample = new MindWaveSample(in);
                    if (sample.getTimeStamp()==null) continue; // if sample eegPower is bad...
                    
                    long[] values = sample.getValues();
                    long[] valuesWithRec = new long[values.length+1];
                    System.arraycopy(values, 0, valuesWithRec, 1, values.length);

                    if (isRecording) {
                        valuesWithRec[0]=1; 
                        recordingBuffer.add(sample);
                    } else {
                        valuesWithRec[0]=0;
                    }
                    
                    scaleValues(valuesWithRec);
                    support.addValues(System.currentTimeMillis(), valuesWithRec);
                    out.println(sample);

                    if (logToFile) {
                      buffWritter.write(sample.getAsCsv() + System.lineSeparator());
                    }
                    
                    // todo: fire event here
                    fireMindWaveEvent(new MindWaveEvent(this, sample));
                    
                }
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            } catch (JSONException ex) {
                Exceptions.printStackTrace(ex);
            }       
        }
        
        public void close() {
            if (logToFile) {
                try {
                    buffWritter.flush();
                    buffWritter.close();
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }

        private MindWaveThread(SimpleXYChartSupport support, boolean logToFile, String logFileName) {
            this.support = support;
            this.logToFile = logToFile; 
            
            if (logToFile) {
                try {
                    fileWriter = new FileWriter(logFileName);
                    buffWritter = new BufferedWriter(fileWriter);
                    buffWritter.write("timestamp, attention, meditation, delta, theta, lowAlpha, highAlpha, lowBeta, highBeta, lowGamma, highGamma");
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
            }
        }

        private void scaleValues(long[] values) {
            // 0 rec flag            
            values[0] *= ScaleFactors.samplingMarker;                    
            values[1] *= ScaleFactors.attention;// * 1000;
            values[2] *= ScaleFactors.meditation;// * 1000;
            values[3] *= ScaleFactors.delta; // /10;
            values[4] *= ScaleFactors.theta; // /2;
            values[5] *= ScaleFactors.lowAlpha;
            values[6] *= ScaleFactors.highAlpha;
            values[7] *= ScaleFactors.lowBeta;
            values[8] *= ScaleFactors.highBeta;
            values[9] *= ScaleFactors.lowGamma; 
            values[10] *= ScaleFactors.highGamma;
        }
        
        
    }
    
    public void writeToFile() {
        FileWriter fileWriter = null;

        try {
            fileWriter = new FileWriter("mindWave.csv");
            BufferedWriter buffWritter = new BufferedWriter(fileWriter);
            buffWritter.append(log.toString());
            buffWritter.close();
            
        } catch (IOException e1) {
            e1.printStackTrace();
        }

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton clearButton;
    private javax.swing.JLabel connStatusLabel;
    private javax.swing.JButton connectButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField logFileNameField;
    private javax.swing.JButton settingsButton;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JCheckBox writeToFileCheckBox;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        createMindWaveChart();
        out = IOProvider.getDefault().getIO("MindWave", false).getOut();
        add(mindWaveChart.getChart(), BorderLayout.CENTER);
    }
    
    @Override
    public void componentClosed() {
        remove(mindWaveChart.getChart());
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public MindWaveThread getMindWaveThread() {
        return mindWaveThread;
    }
    
    
   
    
}
